@prefix ns1: <http://data.ashrae.org/standard223#> .
@prefix ns2: <http://qudt.org/schema/qudt/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.com/hvac> a owl:Ontology ;
    owl:imports <http://data.ashrae.org/standard223/1.0/model/all> .

<http://example.com/hvac/Room1> a ns1:PhysicalSpace ;
    rdfs:label "Room1" ;
    ns1:encloses <http://example.com/hvac/Room1HVAC> .

<http://example.com/hvac/Room2> a ns1:PhysicalSpace ;
    rdfs:label "Room2" ;
    ns1:encloses <http://example.com/hvac/Room2HVAC> .

<http://example.com/hvac/VAV1_Damper_Coil_Duct> a ns1:Duct ;
    rdfs:label "VAV1_Damper_Coil_Duct" ;
    ns1:cnx <http://example.com/hvac/Heating_Coil1_In>,
        <http://example.com/hvac/VAV1_Damper_Out> ;
    ns1:connectsAt <http://example.com/hvac/Heating_Coil1_In>,
        <http://example.com/hvac/VAV1_Damper_Out> ;
    ns1:connectsFrom <http://example.com/hvac/VAV1_Damper> ;
    ns1:connectsTo <http://example.com/hvac/Heating_Coil1> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/VAV2_Damper_Coil_Duct> a ns1:Duct ;
    rdfs:label "VAV2_Damper_Coil_Duct" ;
    ns1:cnx <http://example.com/hvac/Heating_Coil2_In>,
        <http://example.com/hvac/VAV2_Damper_Out> ;
    ns1:connectsAt <http://example.com/hvac/Heating_Coil2_In>,
        <http://example.com/hvac/VAV2_Damper_Out> ;
    ns1:connectsFrom <http://example.com/hvac/VAV2_Damper> ;
    ns1:connectsTo <http://example.com/hvac/Heating_Coil2> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/Supply_Duct_Room1> a ns1:Duct ;
    rdfs:label "Supply_Duct_Room1" ;
    ns1:cnx <http://example.com/hvac/Room1_Inlet>,
        <http://example.com/hvac/VAV1_Outlet> ;
    ns1:connectsAt <http://example.com/hvac/Room1_Inlet>,
        <http://example.com/hvac/VAV1_Outlet> ;
    ns1:connectsFrom <http://example.com/hvac/VAV1> ;
    ns1:connectsTo <http://example.com/hvac/Room1HVAC> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/Supply_Duct_Room2> a ns1:Duct ;
    rdfs:label "Supply_Duct_Room2" ;
    ns1:cnx <http://example.com/hvac/Room2_Inlet>,
        <http://example.com/hvac/VAV2_Outlet> ;
    ns1:connectsAt <http://example.com/hvac/Room2_Inlet>,
        <http://example.com/hvac/VAV2_Outlet> ;
    ns1:connectsFrom <http://example.com/hvac/VAV2> ;
    ns1:connectsTo <http://example.com/hvac/Room2HVAC> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/Heating_Coil1_Out> a ns1:OutletConnectionPoint ;
    rdfs:label "Heating_Coil1_Out" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:mapsTo <http://example.com/hvac/VAV1_Outlet> .

<http://example.com/hvac/Heating_Coil2_Out> a ns1:OutletConnectionPoint ;
    rdfs:label "Heating_Coil2_Out" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:mapsTo <http://example.com/hvac/VAV2_Outlet> .

<http://example.com/hvac/Return_Duct1> a ns1:Duct ;
    rdfs:label "Return_Duct1" ;
    ns1:cnx <http://example.com/hvac/AHU_Inlet1>,
        <http://example.com/hvac/Room1_Outlet> ;
    ns1:connectsAt <http://example.com/hvac/AHU_Inlet1>,
        <http://example.com/hvac/Room1_Outlet> ;
    ns1:connectsFrom <http://example.com/hvac/Room1HVAC> ;
    ns1:connectsTo <http://example.com/hvac/AHU> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/Return_Duct2> a ns1:Duct ;
    rdfs:label "Return_Duct2" ;
    ns1:cnx <http://example.com/hvac/AHU_Inlet2>,
        <http://example.com/hvac/Room2_Outlet> ;
    ns1:connectsAt <http://example.com/hvac/AHU_Inlet2>,
        <http://example.com/hvac/Room2_Outlet> ;
    ns1:connectsFrom <http://example.com/hvac/Room2HVAC> ;
    ns1:connectsTo <http://example.com/hvac/AHU> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/VAV1_Damper_In> a ns1:InletConnectionPoint ;
    rdfs:label "VAV1_Damper_In" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:mapsTo <http://example.com/hvac/VAV1_Inlet> .

<http://example.com/hvac/VAV2_Damper_In> a ns1:InletConnectionPoint ;
    rdfs:label "VAV2_Damper_In" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:mapsTo <http://example.com/hvac/VAV2_Inlet> .

<http://example.com/hvac/Heating_Coil1> a ns1:HeatingCoil ;
    rdfs:label "Heating_Coil1" ;
    ns1:cnx <http://example.com/hvac/Heating_Coil1_In>,
        <http://example.com/hvac/Heating_Coil1_Out> ;
    ns1:hasConnectionPoint <http://example.com/hvac/Heating_Coil1_In>,
        <http://example.com/hvac/Heating_Coil1_Out> ;
    ns1:hasRole ns1:Role-HeatTransfer,
        ns1:Role-Heating .

<http://example.com/hvac/Heating_Coil2> a ns1:HeatingCoil ;
    rdfs:label "Heating_Coil2" ;
    ns1:cnx <http://example.com/hvac/Heating_Coil2_In>,
        <http://example.com/hvac/Heating_Coil2_Out> ;
    ns1:hasConnectionPoint <http://example.com/hvac/Heating_Coil2_In>,
        <http://example.com/hvac/Heating_Coil2_Out> ;
    ns1:hasRole ns1:Role-HeatTransfer,
        ns1:Role-Heating .

<http://example.com/hvac/VAV1_Damper> a ns1:Damper ;
    rdfs:label "VAV1_Damper" ;
    ns1:cnx <http://example.com/hvac/VAV1_Damper_In>,
        <http://example.com/hvac/VAV1_Damper_Out> ;
    ns1:hasConnectionPoint <http://example.com/hvac/VAV1_Damper_In>,
        <http://example.com/hvac/VAV1_Damper_Out> .

<http://example.com/hvac/VAV2_Damper> a ns1:Damper ;
    rdfs:label "VAV2_Damper" ;
    ns1:cnx <http://example.com/hvac/VAV2_Damper_In>,
        <http://example.com/hvac/VAV2_Damper_Out> ;
    ns1:hasConnectionPoint <http://example.com/hvac/VAV2_Damper_In>,
        <http://example.com/hvac/VAV2_Damper_Out> .

<http://example.com/hvac/AHU_Inlet1> a ns1:InletConnectionPoint ;
    rdfs:label "AHU_Inlet1" ;
    ns1:cnx <http://example.com/hvac/Return_Duct1> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/AHU> .

<http://example.com/hvac/AHU_Inlet2> a ns1:InletConnectionPoint ;
    rdfs:label "AHU_Inlet2" ;
    ns1:cnx <http://example.com/hvac/Return_Duct2> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/AHU> .

<http://example.com/hvac/AHU_Outlet> a ns1:OutletConnectionPoint ;
    rdfs:label "AHU_Outlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/AHU> .

<http://example.com/hvac/Heating_Coil1_In> a ns1:InletConnectionPoint ;
    rdfs:label "Heating_Coil1_In" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Heating_Coil1> .

<http://example.com/hvac/Heating_Coil2_In> a ns1:InletConnectionPoint ;
    rdfs:label "Heating_Coil2_In" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Heating_Coil2> .

<http://example.com/hvac/Room1_Inlet> a ns1:InletConnectionPoint ;
    rdfs:label "Room1_Inlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct_Room1> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Room1HVAC> .

<http://example.com/hvac/Room1_Outlet> a ns1:OutletConnectionPoint ;
    rdfs:label "Room1_Outlet" ;
    ns1:cnx <http://example.com/hvac/Return_Duct1> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Room1HVAC> .

<http://example.com/hvac/Room2_Inlet> a ns1:InletConnectionPoint ;
    rdfs:label "Room2_Inlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct_Room2> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Room2HVAC> .

<http://example.com/hvac/Room2_Outlet> a ns1:OutletConnectionPoint ;
    rdfs:label "Room2_Outlet" ;
    ns1:cnx <http://example.com/hvac/Return_Duct2> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/Room2HVAC> .

<http://example.com/hvac/VAV1> a ns1:SingleDuctTerminal ;
    rdfs:label "VAV1" ;
    ns1:cnx <http://example.com/hvac/VAV1_Inlet>,
        <http://example.com/hvac/VAV1_Outlet> ;
    ns1:contains <http://example.com/hvac/Heating_Coil1>,
        <http://example.com/hvac/VAV1_Damper> ;
    ns1:hasConnectionPoint <http://example.com/hvac/VAV1_Inlet>,
        <http://example.com/hvac/VAV1_Outlet> .

<http://example.com/hvac/VAV1_Damper_Out> a ns1:OutletConnectionPoint ;
    rdfs:label "VAV1_Damper_Out" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV1_Damper> .

<http://example.com/hvac/VAV2> a ns1:SingleDuctTerminal ;
    rdfs:label "VAV2" ;
    ns1:cnx <http://example.com/hvac/VAV2_Inlet>,
        <http://example.com/hvac/VAV2_Outlet> ;
    ns1:contains <http://example.com/hvac/Heating_Coil2>,
        <http://example.com/hvac/VAV2_Damper> ;
    ns1:hasConnectionPoint <http://example.com/hvac/VAV2_Inlet>,
        <http://example.com/hvac/VAV2_Outlet> .

<http://example.com/hvac/VAV2_Damper_Out> a ns1:OutletConnectionPoint ;
    rdfs:label "VAV2_Damper_Out" ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV2_Damper> .

<http://example.com/hvac/Room1HVAC> a ns1:DomainSpace ;
    rdfs:label "Room1HVAC" ;
    ns1:cnx <http://example.com/hvac/Room1_Inlet>,
        <http://example.com/hvac/Room1_Outlet> ;
    ns1:hasConnectionPoint <http://example.com/hvac/Room1_Inlet>,
        <http://example.com/hvac/Room1_Outlet> ;
    ns1:hasDomain ns1:Domain-HVAC .

<http://example.com/hvac/Room2HVAC> a ns1:DomainSpace ;
    rdfs:label "Room2HVAC" ;
    ns1:cnx <http://example.com/hvac/Room2_Inlet>,
        <http://example.com/hvac/Room2_Outlet> ;
    ns1:hasConnectionPoint <http://example.com/hvac/Room2_Inlet>,
        <http://example.com/hvac/Room2_Outlet> ;
    ns1:hasDomain ns1:Domain-HVAC .

<http://example.com/hvac/Supply_Duct> a ns1:Duct ;
    rdfs:label "Supply_Duct" ;
    ns1:cnx <http://example.com/hvac/AHU_Outlet>,
        <http://example.com/hvac/VAV1_Inlet>,
        <http://example.com/hvac/VAV2_Inlet> ;
    ns1:connectsAt <http://example.com/hvac/AHU_Outlet>,
        <http://example.com/hvac/VAV1_Inlet>,
        <http://example.com/hvac/VAV2_Inlet> ;
    ns1:connectsFrom <http://example.com/hvac/AHU> ;
    ns1:connectsTo <http://example.com/hvac/VAV1>,
        <http://example.com/hvac/VAV2> ;
    ns1:hasMedium ns1:Fluid-Air .

<http://example.com/hvac/VAV1_Inlet> a ns1:InletConnectionPoint ;
    rdfs:label "VAV1_Inlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV1> .

<http://example.com/hvac/VAV1_Outlet> a ns1:OutletConnectionPoint ;
    rdfs:label "VAV1_Outlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV1> .

<http://example.com/hvac/VAV2_Inlet> a ns1:InletConnectionPoint ;
    rdfs:label "VAV2_Inlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV2> .

<http://example.com/hvac/VAV2_Outlet> a ns1:OutletConnectionPoint ;
    rdfs:label "VAV2_Outlet" ;
    ns1:cnx <http://example.com/hvac/Supply_Duct> ;
    ns1:hasMedium ns1:Fluid-Air ;
    ns1:isConnectionPointOf <http://example.com/hvac/VAV2> .

<http://example.com/hvac/AHU> a ns1:AirHandlingUnit ;
    rdfs:label "AHU" ;
    ns1:cnx <http://example.com/hvac/AHU_Inlet1>,
        <http://example.com/hvac/AHU_Inlet2>,
        <http://example.com/hvac/AHU_Outlet> ;
    ns1:hasConnectionPoint <http://example.com/hvac/AHU_Inlet1>,
        <http://example.com/hvac/AHU_Inlet2>,
        <http://example.com/hvac/AHU_Outlet> .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment contained within another piece of equipment use the `mapsTo` relation to infer a Medium from the containing equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?childCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?childCp s223:mapsTo ?cp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?childCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the `hasReferenceLocation` relation exists, the observed `Property` must have isDeltaQuantity true."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has a reference location, but its `Property` lacks isDeltaQuantity true."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this
          WHERE {
$this s223:hasReferenceLocation ?y .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:observes/qudt:isDeltaQuantity true}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every SPARQLRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Every SPARQLRule for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this sh:rule ?rule .
?rule a sh:SPARQLRule .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, and is not associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` probably needs an association with a `Connection`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} probably needs an association with a `Connection`, or use of `hasOptionalConnectionPoint` or `hasBoundaryConnectionPoint` qualifiers."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this 
    WHERE {
        FILTER NOT EXISTS {?sys1 s223:hasBoundaryConnectionPoint $this} .
        FILTER NOT EXISTS {?sys2 s223:hasOptionalConnectionPoint $this} .
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        $this s223:isConnectionPointOf ?equipment .
        FILTER NOT EXISTS {?containerEquipment s223:contains ?equipment} .
        }
        """^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Cooling coils must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The property shape with path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:path ?path .
FILTER NOT EXISTS {?propshape rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ZoneGroup matches the constraints defined by g36:ZoneGroup, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 30.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ElectricResistanceElement matches the constraints defined by g36:ElectricHeatingCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] rdfs:comment "A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/e61fed97> ] [ sh:property <urn:well-known/64c6e8b1> ] [ sh:property <urn:well-known/cf3c762d> ] ) ;
    sh:severity sh:Warning .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any instance that is declared to be an instance of an abstract class must also be declared an instance of at least one subClass of that abstract class"^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of only abstract class {?class}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?class
WHERE {
?class s223:abstract true .
$this a ?class .
OPTIONAL {
?otherClass rdfs:subClassOf+ ?class .
$this a ?otherClass .
FILTER (?class != ?otherClass) .
}
FILTER (!bound (?otherClass)) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Connection` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every TripleRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The TripleRule inferring {?pred} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?pred
WHERE {
$this sh:rule ?rule .
?rule a sh:TripleRule .
?rule sh:predicate ?pred .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasObservationLocation` relation for a `Sensor` from the `Property` that it is observing, only if that property is associated with a single entity."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:hasObservationLocation ?something .}
WHERE {
{
SELECT ?prop (COUNT (DISTINCT ?measurementLocation) AS ?count) $this
WHERE {
FILTER (NOT EXISTS {$this s223:hasObservationLocation ?anything}) .
$this s223:observes ?prop .
?measurementLocation s223:hasProperty ?prop .
}
GROUP BY ?prop $this
}
FILTER (?count = 1) .
?something s223:hasProperty ?prop .
{?something a/rdfs:subClassOf* s223:Connectable}
UNION
{?something a/rdfs:subClassOf* s223:Connection}
UNION
{?something a/rdfs:subClassOf* s223:ConnectionPoint}
}
"""^^xsd:string ;
    sh:name "InferredMeasurementLocation"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:HeatingCoil matches the constraints defined by g36:HotWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "A Chilled Beam must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasConnectionPoint` relation using `cnx`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointProperty"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:hasConnectionPoint ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `ConnectionPoint`s."^^xsd:string ;
    sh:object [ sh:path ( ns1:cnx ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that `Role-OutdoorAirIntake` is associated with a `Connectable` directly connecting to Outdoor Air, or properties of this `Connectable`."^^xsd:string ;
    sh:message "{?this} is associated with {$entity}, which does not directly connect to outdoor air."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?entity
WHERE {
?entity (s223:hasRole | (s223:hasProperty/s223:hasAspect)) $this .
?outdoorSpace a/rdfs:subClassOf* s223:OutdoorPhysicalSpace .
?outdoorSpace s223:encloses ?outdoorAir  .
?outdoorAir s223:hasDomain s223:Domain-HVAC .
FILTER NOT EXISTS {?entity s223:connectedFrom ?outdoorAir} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasExternalReference ?ext .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A `Connection` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: `Junction` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the `hasReferenceLocation` relation exists, the observed `Property` must have isDeltaQuantity true."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has a reference location, but its `Property` lacks isDeltaQuantity true."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this
          WHERE {
$this s223:hasReferenceLocation ?y .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:observes/qudt:isDeltaQuantity true}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 30.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Setpoint associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Setpoint {?setpoint} uses QuantityKind {?sqk} with DimensionVector {?sdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasQuantityKind ?sqk .
?pqk qudt:hasDimensionVector ?pdv .
?sqk qudt:hasDimensionVector ?sdv .
FILTER (?pqk != ?sqk) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for symmetric relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?p $this .
}
WHERE {
  $this ?p ?o .
  ?p a s223:SymmetricProperty .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A `Connection` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `Conductor`."^^xsd:string ;
    sh:object [ sh:path ( ns1:connectsThrough ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Junction` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m1} is incompatible with {?cp} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsTo` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsTo ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a substance has a constituent, that constituent may not itself have constituents."^^xsd:string ;
    sh:message "s223: This substance {$this} has a constituent {?constituent} that itself composed ofs {?nextConstituent}. Create new substance with only atomic constituents."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?constituent ?nextConstituent
WHERE {
$this s223:composedOf ?constituent .
?constituent s223:ofConstituent/s223:composedOf ?nextConstituent .
}
"""^^xsd:string .

[] rdfs:comment "A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/e61fed97> ] [ sh:property <urn:well-known/64c6e8b1> ] [ sh:property <urn:well-known/cf3c762d> ] ) ;
    sh:severity sh:Warning .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsFrom` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsFrom ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "A Chilled Beam must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Warning about a subClass of `Equipment` of type A containing something that is in the same subClass branch."^^xsd:string ;
    sh:message "s223: {$this}, of type {?type1}, contains {?subEquip} of type {?type2}, that could result in double-counting items in the class hierarchy of {?type1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?subEquip ?type1 ?type2
WHERE {
  FILTER NOT EXISTS {$this a s223:Equipment} .
$this s223:contains+ ?subEquip .
  FILTER NOT EXISTS {?subEquip a s223:Equipment} .
$this a ?type1 .
?subEquip a ?type2 .
{
?type2 rdfs:subClassOf* ?type1 .
}
UNION
{
?type1 rdfs:subClassOf* ?type2 .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Boundary CPs of a `System` belong to only members of that `System`"^^xsd:string ;
    sh:message "s223: `System` {$this} `hasBoundaryConnectionPoint` {?cp}, belonging to {?con} that is not a member of {?this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp ?con
WHERE {
$this s223:hasBoundaryConnectionPoint ?cp .
?cp s223:isConnectionPointOf ?con .
FILTER NOT EXISTS {$this s223:hasMember+ ?con}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Connection` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The associated Domain of a `Zone` and the Domain of the DomainSpaces it contains must be the same."^^xsd:string ;
    sh:message "s223: `Zone` {$this} has a Domain of {?domain}, but it contains a `DomainSpace` {?ds} which has a Domain of {?dsdomain}. These should be the same."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?domain ?ds ?dsdomain
WHERE {
$this a s223:Zone .
$this s223:hasDomain ?domain .
$this s223:contains ?ds .
?ds s223:hasDomain ?dsdomain .
FILTER (?domain != ?dsdomain)
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `Connectable` has s223:connected or s223:connectedTo (i.e. high-level connection specification), it must also have the supporting `cnx` relations (low-level connection specification)."^^xsd:string ;
    sh:message "s223: {$this} is s223:connected (high-level) to {?otherC} but not connected at the cnx-level."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?otherC
WHERE {
$this s223:connected ?otherC .
FILTER NOT EXISTS {$this s223:cnx+ ?otherC}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Connection` must only have a `cnx` relation with a `ConnectionPoint`"^^xsd:string ;
    sh:message "s223: {$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a `ConnectionPoint`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated threshold use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: `Junction` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {$this} has an incompatible medium {?m1} with any constituent of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:Damper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#DamperOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Signal-Ethernet .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, and is not associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` probably needs an association with a `Connection`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} probably needs an association with a `Connection`, or use of `hasOptionalConnectionPoint` or `hasBoundaryConnectionPoint` qualifiers."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this 
    WHERE {
        FILTER NOT EXISTS {?sys1 s223:hasBoundaryConnectionPoint $this} .
        FILTER NOT EXISTS {?sys2 s223:hasOptionalConnectionPoint $this} .
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        $this s223:isConnectionPointOf ?equipment .
        FILTER NOT EXISTS {?containerEquipment s223:contains ?equipment} .
        }
        """^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for symmetric relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?p $this .
}
WHERE {
  $this ?p ?o .
  ?p a s223:SymmetricProperty .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Warning about a subClass of `Equipment` of type A containing something that is in the same subClass branch."^^xsd:string ;
    sh:message "s223: {$this}, of type {?type1}, contains {?subEquip} of type {?type2}, that could result in double-counting items in the class hierarchy of {?type1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?subEquip ?type1 ?type2
WHERE {
  FILTER NOT EXISTS {$this a s223:Equipment} .
$this s223:contains+ ?subEquip .
  FILTER NOT EXISTS {?subEquip a s223:Equipment} .
$this a ?type1 .
?subEquip a ?type2 .
{
?type2 rdfs:subClassOf* ?type1 .
}
UNION
{
?type1 rdfs:subClassOf* ?type2 .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Boundary CPs of a `System` belong to only members of that `System`"^^xsd:string ;
    sh:message "s223: `System` {$this} `hasBoundaryConnectionPoint` {?cp}, belonging to {?con} that is not a member of {?this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp ?con
WHERE {
$this s223:hasBoundaryConnectionPoint ?cp .
?cp s223:isConnectionPointOf ?con .
FILTER NOT EXISTS {$this s223:hasMember+ ?con}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the threshold associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while threshold {?threshold} uses QuantityKind {?tqk} with DimensionVector {?tdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasQuantityKind ?tqk .
?pqk qudt:hasDimensionVector ?pdv .
?tqk qudt:hasDimensionVector ?tdv .
FILTER (?pqk != ?tqk) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 85.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated threshold use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 30.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that `Role-OutdoorAirIntake` is associated with a `Connectable` directly connecting to Outdoor Air, or properties of this `Connectable`."^^xsd:string ;
    sh:message "{?this} is associated with {$entity}, which does not directly connect to outdoor air."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?entity
WHERE {
?entity (s223:hasRole | (s223:hasProperty/s223:hasAspect)) $this .
?outdoorSpace a/rdfs:subClassOf* s223:OutdoorPhysicalSpace .
?outdoorSpace s223:encloses ?outdoorAir  .
?outdoorAir s223:hasDomain s223:Domain-HVAC .
FILTER NOT EXISTS {?entity s223:connectedFrom ?outdoorAir} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the Deadband associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv = ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} with inlet medium {?m2} is incompatible with outlet medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Signal-Ethernet .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 70.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Connection` must only have a `cnx` relation with a `ConnectionPoint`"^^xsd:string ;
    sh:message "s223: {$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a `ConnectionPoint`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure the electrical phase is the same as all connected `ConnectionPoint`s"^^xsd:string ;
    sh:message "s223: {$this} has an electrical phase of {?myphase} which is different from {?cpPhase} for `ConnectionPoint` {?cp}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?myphase ?cp ?cpPhase
    WHERE {
        $this s223:hasElectricalPhase ?myphase .
        $this s223:connectsAt ?cp .
        ?cp s223:hasElectricalPhase ?cpPhase .
        FILTER (?myphase != ?cpPhase) .
        }
        """^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Connection` must only have a `cnx` relation with a `ConnectionPoint`"^^xsd:string ;
    sh:message "s223: {$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a `ConnectionPoint`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The non-electrical `ConnectionPoint`s of a `Pump` must have compatible Media."^^xsd:string ;
    sh:message "s223: {?cpa} and {?cpb} on the `Pump` {$this} have incompatible Media {$mediuma} and {$mediumb}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cpa ?cpb ?mediuma ?mediumb
WHERE {
  $this s223:hasConnectionPoint ?cpa .
  $this s223:hasConnectionPoint ?cpb .
  FILTER (?cpa != ?cpb) .
  ?cpa s223:hasMedium ?mediuma .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  ?cpb s223:hasMedium ?mediumb .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  FILTER (?mediuma != ?mediumb) .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* ?mediuma}) .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* ?mediumb}) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:HeatingCoil matches the constraints defined by g36:HotWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A `Connection` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `ConnectionPoint` must not have both a `mapsTo` and a `connectsThrough` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `mapsTo` {?uppercp} and a `connectsThrough` {?connection}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?uppercp ?connection
WHERE {
$this s223:mapsTo ?uppercp .
$this s223:connectsThrough ?connection .
?connection a/rdfs:subClassOf* s223:Connection .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedFrom`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedFrom"^^xsd:string ;
    sh:object [ sh:path ns1:connectedFrom ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every TripleRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The TripleRule inferring {?pred} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?pred
WHERE {
$this sh:rule ?rule .
?rule a sh:TripleRule .
?rule sh:predicate ?pred .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] rdfs:comment "A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/c351007f> ] [ sh:property <urn:well-known/b7ad35f3> ] [ sh:property <urn:well-known/ff4115ff> ] ) ;
    sh:severity sh:Warning .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Junction` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasQuantityKind` relation if it is unambiguous."^^xsd:string ;
    sh:construct """
CONSTRUCT {
$this qudt:hasQuantityKind ?uniqueqk
}
WHERE {
{
SELECT $this (COUNT (DISTINCT (?qk)) AS ?count)
WHERE {
FILTER (NOT EXISTS {$this qudt:hasQuantityKind ?something}) .
$this qudt:hasUnit/qudt:hasQuantityKind ?qk .
}
GROUP BY $this
}
FILTER (?count = 1)
$this qudt:hasUnit/qudt:hasQuantityKind ?uniqueqk .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connected` relation for BiDirectional connections"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connected ?d2 .}
WHERE {
$this s223:connectedThrough/^s223:connectedThrough ?d2 .
FILTER ($this != ?d2) .
FILTER NOT EXISTS {$this s223:contains* ?d2} .
FILTER NOT EXISTS {?d2 s223:contains* $this} .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Setpoint associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Setpoint {?setpoint} uses QuantityKind {?sqk} with DimensionVector {?sdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasQuantityKind ?sqk .
?pqk qudt:hasDimensionVector ?pdv .
?sqk qudt:hasDimensionVector ?sdv .
FILTER (?pqk != ?sqk) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:ChilledWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Zone matches the constraints defined by g36:Zone, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Signal-Ethernet .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must also be an instance of sh:NodeShape. "^^xsd:string ;
    sh:message "s223: Class {$this} must be declared as an instance of sh:NodeShape."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this a sh:NodeShape} .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedTo` relation using `connectsThrough` and `connectsTo`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedTo ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:connectsThrough/s223:connectsTo ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 85.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relationship using `hasConnectionPoint`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxProperty"^^xsd:string ;
    sh:object [ sh:path ns1:hasConnectionPoint ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: Two `ConnectionPoint`s with a medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Zone matches the constraints defined by g36:Zone, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {$this} has an incompatible medium {?m1} with any constituent of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for valid enumeration value consistent with the stated `EnumerationKind`."^^xsd:string ;
    sh:message "s223: {$this} has an enumeration value of {?value} which is not a valid {?kind}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?value ?kind
WHERE {
$this s223:hasValue ?value .
$this s223:hasEnumerationKind ?kind .
FILTER (NOT EXISTS {?value a/rdfs:subClassOf* ?kind}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed Zones to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasZone ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A pure medium and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: Two `ConnectionPoint`s with a medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasRole` s223:Role-HeatTransfer relation for every instance of the listed targetClass values."^^xsd:string ;
    sh:object ns1:Role-HeatTransfer ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] rdfs:comment "A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/c351007f> ] [ sh:property <urn:well-known/b7ad35f3> ] [ sh:property <urn:well-known/ff4115ff> ] ) ;
    sh:severity sh:Warning .

[] a sh:TripleRule ;
    rdfs:comment "Heating coils must always have the role `Role-Heating`"^^xsd:string ;
    sh:object ns1:Role-Heating ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated Deadband use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:FanWithVFD, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:HeatingCoil matches the constraints defined by g36:HotWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsThrough`"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:connectsThrough ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsFrom` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsFrom ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasConnectionPoint` relation using `cnx`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointProperty"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:hasConnectionPoint ;
    sh:subject sh:this .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Electricity-DC .

[] rdfs:comment "A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/c351007f> ] [ sh:property <urn:well-known/b7ad35f3> ] [ sh:property <urn:well-known/ff4115ff> ] ) ;
    sh:severity sh:Warning .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed Zones to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasZone ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Junction` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:Damper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#DamperOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment contained within another piece of equipment use the `mapsTo` relation to infer a Medium from the containing equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?childCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?childCp s223:mapsTo ?cp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?childCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m2} is incompatible with {?cp2} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m2 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If an incoming relation `composedOf` exists, then the `Property` must have a declared substance using the relation `ofConstituent`."^^xsd:string ;
    sh:message "s223: `Property` {$this} is referred to by {?something} with s223:composedOf, but the `Property` has no value for s223:ofConstituent."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?something
WHERE {
?something s223:composedOf $this .
FILTER NOT EXISTS {$this s223:ofConstituent ?someSubstance} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the setpoint associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv = ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedFrom`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedFrom"^^xsd:string ;
    sh:object [ sh:path ns1:connectedFrom ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If an incoming relation `composedOf` exists, then the `Property` must have a declared substance using the relation `ofConstituent`."^^xsd:string ;
    sh:message "s223: `Property` {$this} is referred to by {?something} with s223:composedOf, but the `Property` has no value for s223:ofConstituent."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?something
WHERE {
?something s223:composedOf $this .
FILTER NOT EXISTS {$this s223:ofConstituent ?someSubstance} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relation using `isConnectionPointOf`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxPropertyFromInverse"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:isConnectionPointOf ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {$this} has an incompatible medium {?m1} with any constituent of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must also be an instance of sh:NodeShape. "^^xsd:string ;
    sh:message "s223: Class {$this} must be declared as an instance of sh:NodeShape."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this a sh:NodeShape} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed DomainSpaces to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasDomainSpace ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:CoolingCoil matches the constraints defined by g36:ChilledWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:Fan, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Boundary CPs of a `System` belong to only members of that `System`"^^xsd:string ;
    sh:message "s223: `System` {$this} `hasBoundaryConnectionPoint` {?cp}, belonging to {?con} that is not a member of {?this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp ?con
WHERE {
$this s223:hasBoundaryConnectionPoint ?cp .
?cp s223:isConnectionPointOf ?con .
FILTER NOT EXISTS {$this s223:hasMember+ ?con}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 15.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A medium with constituents and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: A medium with constituents and an associated property with a pure medium."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m2}, but is associated with property {?prop} that has `ofMedium` of {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m2 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `OutletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `OutletConnectionPoint` of {?parentEquipment} and not an external `Connection` to {?destinationEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?destinationEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsTo ?destinationEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?destinationEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` instance cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this a/rdfs:subClassOf* s223:ActuatableProperty .
$this a/rdfs:subClassOf* s223:ObservableProperty .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Cooling coils must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasQuantityKind` relation if it is unambiguous."^^xsd:string ;
    sh:construct """
CONSTRUCT {
$this qudt:hasQuantityKind ?uniqueqk
}
WHERE {
{
SELECT $this (COUNT (DISTINCT (?qk)) AS ?count)
WHERE {
FILTER (NOT EXISTS {$this qudt:hasQuantityKind ?something}) .
$this qudt:hasUnit/qudt:hasQuantityKind ?qk .
}
GROUP BY $this
}
FILTER (?count = 1)
$this qudt:hasUnit/qudt:hasQuantityKind ?uniqueqk .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the threshold associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while threshold {?threshold} uses QuantityKind {?tqk} with DimensionVector {?tdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasQuantityKind ?tqk .
?pqk qudt:hasDimensionVector ?pdv .
?tqk qudt:hasDimensionVector ?tdv .
FILTER (?pqk != ?tqk) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external outgoing connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection to external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedTo ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the Deadband associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv = ?ddv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 70.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedFrom`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedFrom"^^xsd:string ;
    sh:object [ sh:path ns1:connectedFrom ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Deadband associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Deadband {?deadband} uses QuantityKind {?dqk} with DimensionVector {?ddv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?pqk ?dqk ?pdv ?ddv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasQuantityKind ?dqk .
?pqk qudt:hasDimensionVector ?pdv .
?dqk qudt:hasDimensionVector ?ddv .
FILTER (?pqk != ?dqk) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: Two mediums with constituents."^^xsd:string ;
    sh:message "s223: For `Filter` {$this} there is no compatible substance between medium {?m2} and medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT ?this ?m2 ?m1
WHERE {
  ?this s223:cnx ?cp1, ?cp2 .
  ?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
  ?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
  FILTER (?cp1 != ?cp2) .
  ?cp1 s223:hasMedium ?m1 .
  ?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` `mapsTo` another `ConnectionPoint`, the respective `Equipment` should have a `contains` relation."^^xsd:string ;
    sh:message "s223: {?otherEquipment} should contain {?equipment} because `ConnectionPoint` {$this} has a `mapsTo` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?equipment ?otherEquipment
WHERE {
$this s223:mapsTo ?otherCP .
?equipment s223:hasConnectionPoint $this .
?otherEquipment s223:hasConnectionPoint ?otherCP .
FILTER NOT EXISTS {?otherEquipment s223:contains ?equipment}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:TwoPositionDamper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a substance has a constituent, that constituent may not itself have constituents."^^xsd:string ;
    sh:message "s223: This substance {$this} has a constituent {?constituent} that itself composed ofs {?nextConstituent}. Create new substance with only atomic constituents."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?constituent ?nextConstituent
WHERE {
$this s223:composedOf ?constituent .
?constituent s223:ofConstituent/s223:composedOf ?nextConstituent .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relation using `isConnectionPointOf`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxPropertyFromInverse"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:isConnectionPointOf ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasExternalReference ?ext .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the setpoint associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv = ?sdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasRole` s223:Role-HeatTransfer relation for every instance of the listed targetClass values."^^xsd:string ;
    sh:object ns1:Role-HeatTransfer ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment """Ensure that all instances of an s223 class use only the properties defined for that class. Note that
properties from other namespaces are not checked by this validation."""^^xsd:string ;
    sh:message "s223: Predicate {?p} is not defined for instance {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?p ?o
WHERE {
$this ?p ?o .
FILTER(STRSTARTS (str(?p), "http://data.ashrae.org/standard223#") || STRSTARTS (str(?p), "http://qudt.org/schema/qudt"))
FILTER NOT EXISTS {$this a sh:NodeShape}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
			?class sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:xone/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:or/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `OutletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `OutletConnectionPoint` of {?parentEquipment} and not an external `Connection` to {?destinationEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?destinationEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsTo ?destinationEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?destinationEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Add an rdfs:label if it is missing."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this rdfs:label ?newLabel .}
WHERE {
FILTER (NOT EXISTS {$this rdfs:label ?something}) .
BIND(REPLACE(STR($this), "^.*/([^/]*)$", "$1") AS ?localNameWithoutHash)
BIND(REPLACE(?localNameWithoutHash, "^.*#(.*)$", "$1") AS ?localName)
BIND(REPLACE(?localName, "-", " ", "i") AS ?newLabel)
}
"""^^xsd:string ;
    sh:name "AddLabelFromLocalName"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated Deadband use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, but is associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` might need a `mapsTo` relation to a `ConnectionPoint` of the containing `Equipment`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} could be missing a `mapsTo` relation to a `ConnectionPoint` of {?containerEquipment} because it is associated with a `Junction` or `Equipment` that is contained by {?containerEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?containerEquipment
    WHERE {
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        FILTER NOT EXISTS {?anything3 s223:hasBoundaryConnectionPoint $this} .
        $this s223:isConnectionPointOf ?equipment .
        ?containerEquipment s223:contains ?equipment .
        }
        """^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasRole` s223:Role-HeatTransfer relation for every instance of the listed targetClass values."^^xsd:string ;
    sh:object ns1:Role-HeatTransfer ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the threshold associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv = ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Medium identified by a `ConnectionPoint` via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the `mapsTo`+ relation."^^xsd:string ;
    sh:message "s223: {$this} declares a medium of {?a}, but the medium of {?b} is declared by {?target} pointed to by the `mapsTo`+ relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?a ?b ?target
WHERE {
$this s223:hasMedium ?a .
$this s223:mapsTo+ ?target .
?target s223:hasMedium ?b .
?a a/rdfs:subClassOf* s223:Substance-Medium .
?b a/rdfs:subClassOf* s223:Substance-Medium .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Setpoint associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Setpoint {?setpoint} uses QuantityKind {?sqk} with DimensionVector {?sdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasQuantityKind ?sqk .
?pqk qudt:hasDimensionVector ?pdv .
?sqk qudt:hasDimensionVector ?sdv .
FILTER (?pqk != ?sqk) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:CoolingCoil matches the constraints defined by g36:ChilledWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must be a direct or indirect subclass of s223:Concept. "^^xsd:string ;
    sh:message "s223: Class {$this} must be within the rdfs:subClassOf hierarchy under s223:Concept."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:subClassOf* rdf:Property} .
FILTER NOT EXISTS {$this rdfs:subClassOf* s223:Concept} .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsTo` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsTo ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:TwoPositionDamper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed Zones to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasZone ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every TripleRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The TripleRule inferring {?pred} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?pred
WHERE {
$this sh:rule ?rule .
?rule a sh:TripleRule .
?rule sh:predicate ?pred .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for valid enumeration value consistent with the stated `EnumerationKind`."^^xsd:string ;
    sh:message "s223: {$this} has an enumeration value of {?value} which is not a valid {?kind}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?value ?kind
WHERE {
$this s223:hasValue ?value .
$this s223:hasEnumerationKind ?kind .
FILTER (NOT EXISTS {?value a/rdfs:subClassOf* ?kind}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Medium identified by a `ConnectionPoint` via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the `mapsTo`+ relation."^^xsd:string ;
    sh:message "s223: {$this} declares a medium of {?a}, but the medium of {?b} is declared by {?target} pointed to by the `mapsTo`+ relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?a ?b ?target
WHERE {
$this s223:hasMedium ?a .
$this s223:mapsTo+ ?target .
?target s223:hasMedium ?b .
?a a/rdfs:subClassOf* s223:Substance-Medium .
?b a/rdfs:subClassOf* s223:Substance-Medium .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 30.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment """Ensure that all instances of an s223 class use only the properties defined for that class. Note that
properties from other namespaces are not checked by this validation."""^^xsd:string ;
    sh:message "s223: Predicate {?p} is not defined for instance {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?p ?o
WHERE {
$this ?p ?o .
FILTER(STRSTARTS (str(?p), "http://data.ashrae.org/standard223#") || STRSTARTS (str(?p), "http://qudt.org/schema/qudt"))
FILTER NOT EXISTS {$this a sh:NodeShape}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
			?class sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:xone/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:or/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasExternalReference ?ext .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment containing another piece of equipment, use the `mapsTo` relation to infer a Medium from the contained equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?parentCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?cp s223:mapsTo ?parentCp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?parentCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A pure medium and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: Two `ConnectionPoint`s with a medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The SPARQLConstraint for path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:sparql ?sparqlconstraint .
?propshape sh:path ?path .
FILTER NOT EXISTS {?sparqlconstraint rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, and is not associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` probably needs an association with a `Connection`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} probably needs an association with a `Connection`, or use of `hasOptionalConnectionPoint` or `hasBoundaryConnectionPoint` qualifiers."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this 
    WHERE {
        FILTER NOT EXISTS {?sys1 s223:hasBoundaryConnectionPoint $this} .
        FILTER NOT EXISTS {?sys2 s223:hasOptionalConnectionPoint $this} .
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        $this s223:isConnectionPointOf ?equipment .
        FILTER NOT EXISTS {?containerEquipment s223:contains ?equipment} .
        }
        """^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` `mapsTo` another `ConnectionPoint`, the respective `Equipment` should have a `contains` relation."^^xsd:string ;
    sh:message "s223: {?otherEquipment} should contain {?equipment} because `ConnectionPoint` {$this} has a `mapsTo` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?equipment ?otherEquipment
WHERE {
$this s223:mapsTo ?otherCP .
?equipment s223:hasConnectionPoint $this .
?otherEquipment s223:hasConnectionPoint ?otherCP .
FILTER NOT EXISTS {?otherEquipment s223:contains ?equipment}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `Junction` is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:message "This `Junction` {$this} is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
            SELECT $this
            WHERE {
                $this s223:hasConnectionPoint? | s223:connectedThrough? ?junc_cp_conn .

                FILTER NOT EXISTS {
                    # Connection has a relation that is not in the structural or required relationships
                    { ?junc_cp_conn ?p ?o . } UNION {?o ?p ?junc_cp_conn . }
                    FILTER (?p NOT IN (
                        s223:connected, s223:connectedTo, s223:connectedThrough, s223:hasConnectionPoint,
                        s223:connectsAt, s223:isConnectionPointOf, s223:cnx, rdf:type, rdfs:label, rdfs:comment
                    )) 
                } .
            }
        """^^xsd:string ;
    sh:severity sh:Warning .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Connection` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasConnectionPoint` relation using `cnx`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointProperty"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:hasConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external incoming connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection from external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedFrom ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedTo`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedTo"^^xsd:string ;
    sh:object [ sh:path ns1:connectedTo ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the observed `Property` has isDeltaQuantity true, the `Sensor` must have a `hasReferenceLocation` relation."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has `Property` {?x} with isDeltaQuantity true, but the `Sensor` lacks a reference location."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this ?x
          WHERE {
$this s223:observes/qudt:isDeltaQuantity true .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:hasReferenceLocation ?y}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `InletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `InletConnectionPoint` of {?parentEquipment} and not an external `Connection` from {?sourceEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?sourceEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsFrom ?sourceEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?sourceEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} with inlet medium {?m2} is incompatible with outlet medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasBoundaryConnectionPoint` relation using `hasOptionalConnectionPoint`."^^xsd:string ;
    sh:name "InferredSystemToBoundaryConnectionPointFromOptional"^^xsd:string ;
    sh:object [ sh:path ns1:hasOptionalConnectionPoint ] ;
    sh:predicate ns1:hasBoundaryConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, but is associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` might need a `mapsTo` relation to a `ConnectionPoint` of the containing `Equipment`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} could be missing a `mapsTo` relation to a `ConnectionPoint` of {?containerEquipment} because it is associated with a `Junction` or `Equipment` that is contained by {?containerEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?containerEquipment
    WHERE {
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        FILTER NOT EXISTS {?anything3 s223:hasBoundaryConnectionPoint $this} .
        $this s223:isConnectionPointOf ?equipment .
        ?containerEquipment s223:contains ?equipment .
        }
        """^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectsAt` relation using `cnx`"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:connectsAt ;
    sh:subject sh:this .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Electricity-DC .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every SPARQLRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Every SPARQLRule for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this sh:rule ?rule .
?rule a sh:SPARQLRule .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relationship using `hasConnectionPoint`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxProperty"^^xsd:string ;
    sh:object [ sh:path ns1:hasConnectionPoint ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: `Junction` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m2} is incompatible with {?cp2} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m2 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connected` relation for BiDirectional connections"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connected ?d2 .}
WHERE {
$this s223:connectedThrough/^s223:connectedThrough ?d2 .
FILTER ($this != ?d2) .
FILTER NOT EXISTS {$this s223:contains* ?d2} .
FILTER NOT EXISTS {?d2 s223:contains* $this} .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:HotWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Junction` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The property shape with path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:path ?path .
FILTER NOT EXISTS {?propshape rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated setpoint use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the threshold associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while threshold {?threshold} uses QuantityKind {?tqk} with DimensionVector {?tdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasQuantityKind ?tqk .
?pqk qudt:hasDimensionVector ?pdv .
?tqk qudt:hasDimensionVector ?tdv .
FILTER (?pqk != ?tqk) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `ZoneGroup` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasZone ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the `hasReferenceLocation` relation exists, the observed `Property` must have isDeltaQuantity true."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has a reference location, but its `Property` lacks isDeltaQuantity true."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this
          WHERE {
$this s223:hasReferenceLocation ?y .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:observes/qudt:isDeltaQuantity true}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: Two `ConnectionPoint`s with a medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `Junction` is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:message "This `Junction` {$this} is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
            SELECT $this
            WHERE {
                $this s223:hasConnectionPoint? | s223:connectedThrough? ?junc_cp_conn .

                FILTER NOT EXISTS {
                    # Connection has a relation that is not in the structural or required relationships
                    { ?junc_cp_conn ?p ?o . } UNION {?o ?p ?junc_cp_conn . }
                    FILTER (?p NOT IN (
                        s223:connected, s223:connectedTo, s223:connectedThrough, s223:hasConnectionPoint,
                        s223:connectsAt, s223:isConnectionPointOf, s223:cnx, rdf:type, rdfs:label, rdfs:comment
                    )) 
                } .
            }
        """^^xsd:string ;
    sh:severity sh:Warning .

[] a sh:SPARQLRule ;
    rdfs:comment "Add an rdfs:label if it is missing."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this rdfs:label ?newLabel .}
WHERE {
FILTER (NOT EXISTS {$this rdfs:label ?something}) .
BIND(REPLACE(STR($this), "^.*/([^/]*)$", "$1") AS ?localNameWithoutHash)
BIND(REPLACE(?localNameWithoutHash, "^.*#(.*)$", "$1") AS ?localName)
BIND(REPLACE(?localName, "-", " ", "i") AS ?newLabel)
}
"""^^xsd:string ;
    sh:name "AddLabelFromLocalName"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 15.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:HeatingCoil matches the constraints defined by g36:HotWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedTo` relation using `connectsThrough` and `connectsTo`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedTo ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:connectsThrough/s223:connectsTo ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relationship using `hasConnectionPoint`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxProperty"^^xsd:string ;
    sh:object [ sh:path ns1:hasConnectionPoint ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If an incoming relation `composedOf` exists, then the `Property` must have a declared substance using the relation `ofConstituent`."^^xsd:string ;
    sh:message "s223: `Property` {$this} is referred to by {?something} with s223:composedOf, but the `Property` has no value for s223:ofConstituent."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?something
WHERE {
?something s223:composedOf $this .
FILTER NOT EXISTS {$this s223:ofConstituent ?someSubstance} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `InletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `InletConnectionPoint` of {?parentEquipment} and not an external `Connection` from {?sourceEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?sourceEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsFrom ?sourceEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?sourceEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasExternalReference ?ext .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `ConnectionPoint` must not have both a `mapsTo` and a `connectsThrough` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `mapsTo` {?uppercp} and a `connectsThrough` {?connection}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?uppercp ?connection
WHERE {
$this s223:mapsTo ?uppercp .
$this s223:connectsThrough ?connection .
?connection a/rdfs:subClassOf* s223:Connection .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a substance has a constituent, that constituent may not itself have constituents."^^xsd:string ;
    sh:message "s223: This substance {$this} has a constituent {?constituent} that itself composed ofs {?nextConstituent}. Create new substance with only atomic constituents."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?constituent ?nextConstituent
WHERE {
$this s223:composedOf ?constituent .
?constituent s223:ofConstituent/s223:composedOf ?nextConstituent .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Deadband associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Deadband {?deadband} uses QuantityKind {?dqk} with DimensionVector {?ddv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?pqk ?dqk ?pdv ?ddv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasQuantityKind ?dqk .
?pqk qudt:hasDimensionVector ?pdv .
?dqk qudt:hasDimensionVector ?ddv .
FILTER (?pqk != ?dqk) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsTo` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsTo ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The non-electrical `ConnectionPoint`s of a `Pump` must have compatible Media."^^xsd:string ;
    sh:message "s223: {?cpa} and {?cpb} on the `Pump` {$this} have incompatible Media {$mediuma} and {$mediumb}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cpa ?cpb ?mediuma ?mediumb
WHERE {
  $this s223:hasConnectionPoint ?cpa .
  $this s223:hasConnectionPoint ?cpb .
  FILTER (?cpa != ?cpb) .
  ?cpa s223:hasMedium ?mediuma .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  ?cpb s223:hasMedium ?mediumb .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  FILTER (?mediuma != ?mediumb) .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* ?mediuma}) .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* ?mediumb}) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment containing another piece of equipment, use the `mapsTo` relation to infer a Medium from the contained equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?parentCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?cp s223:mapsTo ?parentCp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?parentCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `Connectable` has s223:connected or s223:connectedTo (i.e. high-level connection specification), it must also have the supporting `cnx` relations (low-level connection specification)."^^xsd:string ;
    sh:message "s223: {$this} is s223:connected (high-level) to {?otherC} but not connected at the cnx-level."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?otherC
WHERE {
$this s223:connected ?otherC .
FILTER NOT EXISTS {$this s223:cnx+ ?otherC}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the threshold associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv = ?tdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:FanWithVFD, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the `hasReferenceLocation` relation exists, the observed `Property` must have isDeltaQuantity true."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has a reference location, but its `Property` lacks isDeltaQuantity true."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this
          WHERE {
$this s223:hasReferenceLocation ?y .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:observes/qudt:isDeltaQuantity true}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment """Ensure that all instances of an s223 class use only the properties defined for that class. Note that
properties from other namespaces are not checked by this validation."""^^xsd:string ;
    sh:message "s223: Predicate {?p} is not defined for instance {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?p ?o
WHERE {
$this ?p ?o .
FILTER(STRSTARTS (str(?p), "http://data.ashrae.org/standard223#") || STRSTARTS (str(?p), "http://qudt.org/schema/qudt"))
FILTER NOT EXISTS {$this a sh:NodeShape}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
			?class sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:xone/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:or/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasBoundaryConnectionPoint` relation using `hasOptionalConnectionPoint`."^^xsd:string ;
    sh:name "InferredSystemToBoundaryConnectionPointFromOptional"^^xsd:string ;
    sh:object [ sh:path ns1:hasOptionalConnectionPoint ] ;
    sh:predicate ns1:hasBoundaryConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The property shape with path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:path ?path .
FILTER NOT EXISTS {?propshape rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, and is not associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` probably needs an association with a `Connection`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} probably needs an association with a `Connection`, or use of `hasOptionalConnectionPoint` or `hasBoundaryConnectionPoint` qualifiers."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this 
    WHERE {
        FILTER NOT EXISTS {?sys1 s223:hasBoundaryConnectionPoint $this} .
        FILTER NOT EXISTS {?sys2 s223:hasOptionalConnectionPoint $this} .
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        $this s223:isConnectionPointOf ?equipment .
        FILTER NOT EXISTS {?containerEquipment s223:contains ?equipment} .
        }
        """^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for valid enumeration value consistent with the stated `EnumerationKind`."^^xsd:string ;
    sh:message "s223: {$this} has an enumeration value of {?value} which is not a valid {?kind}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?value ?kind
WHERE {
$this s223:hasValue ?value .
$this s223:hasEnumerationKind ?kind .
FILTER (NOT EXISTS {?value a/rdfs:subClassOf* ?kind}) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasObservationLocation` relation for a `Sensor` from the `Property` that it is observing, only if that property is associated with a single entity."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:hasObservationLocation ?something .}
WHERE {
{
SELECT ?prop (COUNT (DISTINCT ?measurementLocation) AS ?count) $this
WHERE {
FILTER (NOT EXISTS {$this s223:hasObservationLocation ?anything}) .
$this s223:observes ?prop .
?measurementLocation s223:hasProperty ?prop .
}
GROUP BY ?prop $this
}
FILTER (?count = 1) .
?something s223:hasProperty ?prop .
{?something a/rdfs:subClassOf* s223:Connectable}
UNION
{?something a/rdfs:subClassOf* s223:Connection}
UNION
{?something a/rdfs:subClassOf* s223:ConnectionPoint}
}
"""^^xsd:string ;
    sh:name "InferredMeasurementLocation"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `ConnectionPoint` must not have both a `mapsTo` and a `connectsThrough` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `mapsTo` {?uppercp} and a `connectsThrough` {?connection}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?uppercp ?connection
WHERE {
$this s223:mapsTo ?uppercp .
$this s223:connectsThrough ?connection .
?connection a/rdfs:subClassOf* s223:Connection .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasExternalReference ?ext .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Add an rdfs:label if it is missing."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this rdfs:label ?newLabel .}
WHERE {
FILTER (NOT EXISTS {$this rdfs:label ?something}) .
BIND(REPLACE(STR($this), "^.*/([^/]*)$", "$1") AS ?localNameWithoutHash)
BIND(REPLACE(?localNameWithoutHash, "^.*#(.*)$", "$1") AS ?localName)
BIND(REPLACE(?localName, "-", " ", "i") AS ?newLabel)
}
"""^^xsd:string ;
    sh:name "AddLabelFromLocalName"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated Deadband use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed DomainSpaces to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasDomainSpace ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The associated Domain of a `Zone` and the Domain of the DomainSpaces it contains must be the same."^^xsd:string ;
    sh:message "s223: `Zone` {$this} has a Domain of {?domain}, but it contains a `DomainSpace` {?ds} which has a Domain of {?dsdomain}. These should be the same."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?domain ?ds ?dsdomain
WHERE {
$this a s223:Zone .
$this s223:hasDomain ?domain .
$this s223:contains ?ds .
?ds s223:hasDomain ?dsdomain .
FILTER (?domain != ?dsdomain)
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `ConnectionPoint`s."^^xsd:string ;
    sh:object [ sh:path ( ns1:cnx ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: A medium with constituents and an associated property with a pure medium."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m2}, but is associated with property {?prop} that has `ofMedium` of {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m2 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external incoming connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection from external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedFrom ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The non-electrical `ConnectionPoint`s of a `Pump` must have compatible Media."^^xsd:string ;
    sh:message "s223: {?cpa} and {?cpb} on the `Pump` {$this} have incompatible Media {$mediuma} and {$mediumb}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cpa ?cpb ?mediuma ?mediumb
WHERE {
  $this s223:hasConnectionPoint ?cpa .
  $this s223:hasConnectionPoint ?cpb .
  FILTER (?cpa != ?cpb) .
  ?cpa s223:hasMedium ?mediuma .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  ?cpb s223:hasMedium ?mediumb .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  FILTER (?mediuma != ?mediumb) .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* ?mediuma}) .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* ?mediumb}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Junction` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m1} is incompatible with {?cp} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the Deadband associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv = ?ddv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:Fan, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external outgoing connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection to external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedTo ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Zone matches the constraints defined by g36:Zone, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedFrom` relations using `connectsThrough` and `connectsFrom`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedFrom ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:connectsThrough/s223:connectsFrom ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: Two mediums with constituents."^^xsd:string ;
    sh:message "s223: For `Filter` {$this} there is no compatible substance between medium {?m2} and medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT ?this ?m2 ?m1
WHERE {
  ?this s223:cnx ?cp1, ?cp2 .
  ?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
  ?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
  FILTER (?cp1 != ?cp2) .
  ?cp1 s223:hasMedium ?m1 .
  ?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `ConnectionPoint` must not have both a `mapsTo` and a `connectsThrough` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `mapsTo` {?uppercp} and a `connectsThrough` {?connection}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?uppercp ?connection
WHERE {
$this s223:mapsTo ?uppercp .
$this s223:connectsThrough ?connection .
?connection a/rdfs:subClassOf* s223:Connection .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} with inlet medium {?m2} is incompatible with outlet medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:Damper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#DamperOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for relations that have defined inverse relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?invP $this .
}
WHERE {
  $this ?p ?o .
  ?p s223:inverseOf ?invP .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: A medium with constituents and an associated property with a pure medium."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m2}, but is associated with property {?prop} that has `ofMedium` of {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m2 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment contained within another piece of equipment use the `mapsTo` relation to infer a Medium from the containing equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?childCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?childCp s223:mapsTo ?cp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?childCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated threshold use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `OutletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `OutletConnectionPoint` of {?parentEquipment} and not an external `Connection` to {?destinationEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?destinationEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsTo ?destinationEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?destinationEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `OutletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `OutletConnectionPoint` of {?parentEquipment} and not an external `Connection` to {?destinationEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?destinationEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsTo ?destinationEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?destinationEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Connection` must only have a `cnx` relation with a `ConnectionPoint`"^^xsd:string ;
    sh:message "s223: {$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a `ConnectionPoint`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for relations that have defined inverse relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?invP $this .
}
WHERE {
  $this ?p ?o .
  ?p s223:inverseOf ?invP .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasExternalReference ?ext .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectedThrough` relation using `hasConnectionPoint` and `connectsThrough`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionProperty"^^xsd:string ;
    sh:object [ sh:path ( ns1:hasConnectionPoint ns1:connectsThrough ) ] ;
    sh:predicate ns1:connectedThrough ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasObservationLocation` relation for a `Sensor` from the `Property` that it is observing, only if that property is associated with a single entity."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:hasObservationLocation ?something .}
WHERE {
{
SELECT ?prop (COUNT (DISTINCT ?measurementLocation) AS ?count) $this
WHERE {
FILTER (NOT EXISTS {$this s223:hasObservationLocation ?anything}) .
$this s223:observes ?prop .
?measurementLocation s223:hasProperty ?prop .
}
GROUP BY ?prop $this
}
FILTER (?count = 1) .
?something s223:hasProperty ?prop .
{?something a/rdfs:subClassOf* s223:Connectable}
UNION
{?something a/rdfs:subClassOf* s223:Connection}
UNION
{?something a/rdfs:subClassOf* s223:ConnectionPoint}
}
"""^^xsd:string ;
    sh:name "InferredMeasurementLocation"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external outgoing connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection to external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedTo ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedTo`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedTo"^^xsd:string ;
    sh:object [ sh:path ns1:connectedTo ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "A Chilled Beam must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A pure medium and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` instance cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this a/rdfs:subClassOf* s223:ActuatableProperty .
$this a/rdfs:subClassOf* s223:ObservableProperty .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `Zone` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasDomainSpace ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `InletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `InletConnectionPoint` of {?parentEquipment} and not an external `Connection` from {?sourceEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?sourceEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsFrom ?sourceEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?sourceEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsFrom` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsFrom ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Electricity-DC .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `Junction` is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:message "This `Junction` {$this} is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
            SELECT $this
            WHERE {
                $this s223:hasConnectionPoint? | s223:connectedThrough? ?junc_cp_conn .

                FILTER NOT EXISTS {
                    # Connection has a relation that is not in the structural or required relationships
                    { ?junc_cp_conn ?p ?o . } UNION {?o ?p ?junc_cp_conn . }
                    FILTER (?p NOT IN (
                        s223:connected, s223:connectedTo, s223:connectedThrough, s223:hasConnectionPoint,
                        s223:connectsAt, s223:isConnectionPointOf, s223:cnx, rdf:type, rdfs:label, rdfs:comment
                    )) 
                } .
            }
        """^^xsd:string ;
    sh:severity sh:Warning .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectedThrough` relation using `hasConnectionPoint` and `connectsThrough`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionProperty"^^xsd:string ;
    sh:object [ sh:path ( ns1:hasConnectionPoint ns1:connectsThrough ) ] ;
    sh:predicate ns1:connectedThrough ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsThrough`"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:connectsThrough ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedTo` relation using `connectsThrough` and `connectsTo`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedTo ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:connectsThrough/s223:connectsTo ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:HotWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsAt`"^^xsd:string ;
    sh:object [ sh:path ns1:connectsAt ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 70.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Connection` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relationship using `hasConnectionPoint`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxProperty"^^xsd:string ;
    sh:object [ sh:path ns1:hasConnectionPoint ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "A Chilled Beam must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectsAt` relation using `cnx`"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:connectsAt ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Zone matches the constraints defined by g36:Zone, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Zone> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The SPARQLConstraint for path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:sparql ?sparqlconstraint .
?propshape sh:path ?path .
FILTER NOT EXISTS {?sparqlconstraint rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsAt`"^^xsd:string ;
    sh:object [ sh:path ns1:connectsAt ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `ZoneGroup` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasZone ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedTo` relation using `connectsThrough` and `connectsTo`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedTo ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:connectsThrough/s223:connectsTo ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment containing another piece of equipment, use the `mapsTo` relation to infer a Medium from the contained equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?parentCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?cp s223:mapsTo ?parentCp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?parentCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ElectricResistanceElement matches the constraints defined by g36:ElectricHeatingCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasBoundaryConnectionPoint` relation using `hasOptionalConnectionPoint`."^^xsd:string ;
    sh:name "InferredSystemToBoundaryConnectionPointFromOptional"^^xsd:string ;
    sh:object [ sh:path ns1:hasOptionalConnectionPoint ] ;
    sh:predicate ns1:hasBoundaryConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure an `InletConnectionPoint` has a `mapsTo` relation to its containing `Equipment` if it has an external `Connection`"^^xsd:string ;
    sh:message "s223: {$this} must have a `mapsTo` an `InletConnectionPoint` of {?parentEquipment} and not an external `Connection` from {?sourceEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?parentEquipment ?sourceEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsFrom ?sourceEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?sourceEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedTo`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedTo"^^xsd:string ;
    sh:object [ sh:path ns1:connectedTo ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A medium with constituents and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external incoming connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection from external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedFrom ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `ConnectionPoint`s."^^xsd:string ;
    sh:object [ sh:path ( ns1:cnx ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external outgoing connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection to external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedTo ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: `Junction` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `ZoneGroup` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasZone ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated threshold use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `Conductor`."^^xsd:string ;
    sh:object [ sh:path ( ns1:connectsThrough ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Warning about a subClass of `Equipment` of type A containing something that is in the same subClass branch."^^xsd:string ;
    sh:message "s223: {$this}, of type {?type1}, contains {?subEquip} of type {?type2}, that could result in double-counting items in the class hierarchy of {?type1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?subEquip ?type1 ?type2
WHERE {
  FILTER NOT EXISTS {$this a s223:Equipment} .
$this s223:contains+ ?subEquip .
  FILTER NOT EXISTS {?subEquip a s223:Equipment} .
$this a ?type1 .
?subEquip a ?type2 .
{
?type2 rdfs:subClassOf* ?type1 .
}
UNION
{
?type1 rdfs:subClassOf* ?type2 .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Medium identified by a `ConnectionPoint` via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the `mapsTo`+ relation."^^xsd:string ;
    sh:message "s223: {$this} declares a medium of {?a}, but the medium of {?b} is declared by {?target} pointed to by the `mapsTo`+ relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?a ?b ?target
WHERE {
$this s223:hasMedium ?a .
$this s223:mapsTo+ ?target .
?target s223:hasMedium ?b .
?a a/rdfs:subClassOf* s223:Substance-Medium .
?b a/rdfs:subClassOf* s223:Substance-Medium .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsAt`"^^xsd:string ;
    sh:object [ sh:path ns1:connectsAt ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A pure medium and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` `mapsTo` another `ConnectionPoint`, the respective `Equipment` should have a `contains` relation."^^xsd:string ;
    sh:message "s223: {?otherEquipment} should contain {?equipment} because `ConnectionPoint` {$this} has a `mapsTo` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?equipment ?otherEquipment
WHERE {
$this s223:mapsTo ?otherCP .
?equipment s223:hasConnectionPoint $this .
?otherEquipment s223:hasConnectionPoint ?otherCP .
FILTER NOT EXISTS {?otherEquipment s223:contains ?equipment}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the observed `Property` has isDeltaQuantity true, the `Sensor` must have a `hasReferenceLocation` relation."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has `Property` {?x} with isDeltaQuantity true, but the `Sensor` lacks a reference location."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this ?x
          WHERE {
$this s223:observes/qudt:isDeltaQuantity true .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:hasReferenceLocation ?y}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:ChilledWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {$this} has an incompatible medium {?m1} with any constituent of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: Two mediums with constituents."^^xsd:string ;
    sh:message "s223: For `Filter` {$this} there is no compatible substance between medium {?m2} and medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT ?this ?m2 ?m1
WHERE {
  ?this s223:cnx ?cp1, ?cp2 .
  ?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
  ?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
  FILTER (?cp1 != ?cp2) .
  ?cp1 s223:hasMedium ?m1 .
  ?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must be a direct or indirect subclass of s223:Concept. "^^xsd:string ;
    sh:message "s223: Class {$this} must be within the rdfs:subClassOf hierarchy under s223:Concept."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:subClassOf* rdf:Property} .
FILTER NOT EXISTS {$this rdfs:subClassOf* s223:Concept} .
}
"""^^xsd:string .

[] rdfs:comment "A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one inlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/c351007f> ] [ sh:property <urn:well-known/b7ad35f3> ] [ sh:property <urn:well-known/ff4115ff> ] ) ;
    sh:severity sh:Warning .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for symmetric relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?p $this .
}
WHERE {
  $this ?p ?o .
  ?p a s223:SymmetricProperty .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:Fan, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasConnectionPoint` relation using `cnx`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointProperty"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:hasConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasExternalReference` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasExternalReference ?ext .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment containing another piece of equipment, use the `mapsTo` relation to infer a Medium from the contained equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?parentCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?cp s223:mapsTo ?parentCp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?parentCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 85.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the setpoint associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv = ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasQuantityKind` relation if it is unambiguous."^^xsd:string ;
    sh:construct """
CONSTRUCT {
$this qudt:hasQuantityKind ?uniqueqk
}
WHERE {
{
SELECT $this (COUNT (DISTINCT (?qk)) AS ?count)
WHERE {
FILTER (NOT EXISTS {$this qudt:hasQuantityKind ?something}) .
$this qudt:hasUnit/qudt:hasQuantityKind ?qk .
}
GROUP BY $this
}
FILTER (?count = 1)
$this qudt:hasUnit/qudt:hasQuantityKind ?uniqueqk .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `Zone` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasDomainSpace ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connected` relation for BiDirectional connections"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connected ?d2 .}
WHERE {
$this s223:connectedThrough/^s223:connectedThrough ?d2 .
FILTER ($this != ?d2) .
FILTER NOT EXISTS {$this s223:contains* ?d2} .
FILTER NOT EXISTS {?d2 s223:contains* $this} .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the observed `Property` has isDeltaQuantity true, the `Sensor` must have a `hasReferenceLocation` relation."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has `Property` {?x} with isDeltaQuantity true, but the `Sensor` lacks a reference location."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this ?x
          WHERE {
$this s223:observes/qudt:isDeltaQuantity true .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:hasReferenceLocation ?y}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Cooling coils must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that `Role-OutdoorAirIntake` is associated with a `Connectable` directly connecting to Outdoor Air, or properties of this `Connectable`."^^xsd:string ;
    sh:message "{?this} is associated with {$entity}, which does not directly connect to outdoor air."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?entity
WHERE {
?entity (s223:hasRole | (s223:hasProperty/s223:hasAspect)) $this .
?outdoorSpace a/rdfs:subClassOf* s223:OutdoorPhysicalSpace .
?outdoorSpace s223:encloses ?outdoorAir  .
?outdoorAir s223:hasDomain s223:Domain-HVAC .
FILTER NOT EXISTS {?entity s223:connectedFrom ?outdoorAir} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must also be an instance of sh:NodeShape. "^^xsd:string ;
    sh:message "s223: Class {$this} must be declared as an instance of sh:NodeShape."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this a sh:NodeShape} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:ChilledWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment """Ensure that all instances of an s223 class use only the properties defined for that class. Note that
properties from other namespaces are not checked by this validation."""^^xsd:string ;
    sh:message "s223: Predicate {?p} is not defined for instance {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?p ?o
WHERE {
$this ?p ?o .
FILTER(STRSTARTS (str(?p), "http://data.ashrae.org/standard223#") || STRSTARTS (str(?p), "http://qudt.org/schema/qudt"))
FILTER NOT EXISTS {$this a sh:NodeShape}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
			?class sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:xone/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:or/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
}
"""^^xsd:string .

[] rdfs:comment "A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/e61fed97> ] [ sh:property <urn:well-known/64c6e8b1> ] [ sh:property <urn:well-known/cf3c762d> ] ) ;
    sh:severity sh:Warning .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:CoolingCoil matches the constraints defined by g36:ChilledWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m2} is incompatible with {?cp2} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m2 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the threshold associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv = ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated setpoint use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:CoolingCoil matches the constraints defined by g36:ChilledWaterCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ElectricResistanceElement matches the constraints defined by g36:ElectricHeatingCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed DomainSpaces to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasDomainSpace ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The associated Domain of a `Zone` and the Domain of the DomainSpaces it contains must be the same."^^xsd:string ;
    sh:message "s223: `Zone` {$this} has a Domain of {?domain}, but it contains a `DomainSpace` {?ds} which has a Domain of {?dsdomain}. These should be the same."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?domain ?ds ?dsdomain
WHERE {
$this a s223:Zone .
$this s223:hasDomain ?domain .
$this s223:contains ?ds .
?ds s223:hasDomain ?dsdomain .
FILTER (?domain != ?dsdomain)
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed Zones to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasZone ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The property shape with path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:path ?path .
FILTER NOT EXISTS {?propshape rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `ZoneGroup` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasZone ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ZoneGroup matches the constraints defined by g36:ZoneGroup, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that `Role-OutdoorAirIntake` is associated with a `Connectable` directly connecting to Outdoor Air, or properties of this `Connectable`."^^xsd:string ;
    sh:message "{?this} is associated with {$entity}, which does not directly connect to outdoor air."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?entity
WHERE {
?entity (s223:hasRole | (s223:hasProperty/s223:hasAspect)) $this .
?outdoorSpace a/rdfs:subClassOf* s223:OutdoorPhysicalSpace .
?outdoorSpace s223:encloses ?outdoorAir  .
?outdoorAir s223:hasDomain s223:Domain-HVAC .
FILTER NOT EXISTS {?entity s223:connectedFrom ?outdoorAir} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, but is associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` might need a `mapsTo` relation to a `ConnectionPoint` of the containing `Equipment`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} could be missing a `mapsTo` relation to a `ConnectionPoint` of {?containerEquipment} because it is associated with a `Junction` or `Equipment` that is contained by {?containerEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?containerEquipment
    WHERE {
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        FILTER NOT EXISTS {?anything3 s223:hasBoundaryConnectionPoint $this} .
        $this s223:isConnectionPointOf ?equipment .
        ?containerEquipment s223:contains ?equipment .
        }
        """^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure the electrical phase is the same as all connected `ConnectionPoint`s"^^xsd:string ;
    sh:message "s223: {$this} has an electrical phase of {?myphase} which is different from {?cpPhase} for `ConnectionPoint` {?cp}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?myphase ?cp ?cpPhase
    WHERE {
        $this s223:hasElectricalPhase ?myphase .
        $this s223:connectsAt ?cp .
        ?cp s223:hasElectricalPhase ?cpPhase .
        FILTER (?myphase != ?cpPhase) .
        }
        """^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ZoneGroup matches the constraints defined by g36:ZoneGroup, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Connection` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ElectricResistanceElement matches the constraints defined by g36:ElectricHeatingCoil, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ElectricHeatingCoil> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A medium with constituents and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for consistent dimension vectors for a QuantityKind and the Unit"^^xsd:string ;
    sh:message "s223: Inconsistent dimensionalities among the `Property`'s Unit and `Property`'s Quantity Kind"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
   WHERE 
{
      $this qudt:hasQuantityKind/qudt:hasDimensionVector ?qkdv1 .
      $this qudt:hasUnit/qudt:hasDimensionVector ?qkdv2 .
FILTER (?qkdv1 != ?qkdv2) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectedThrough` relation using `hasConnectionPoint` and `connectsThrough`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionProperty"^^xsd:string ;
    sh:object [ sh:path ( ns1:hasConnectionPoint ns1:connectsThrough ) ] ;
    sh:predicate ns1:connectedThrough ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Warning about a subClass of `Equipment` of type A containing something that is in the same subClass branch."^^xsd:string ;
    sh:message "s223: {$this}, of type {?type1}, contains {?subEquip} of type {?type2}, that could result in double-counting items in the class hierarchy of {?type1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?subEquip ?type1 ?type2
WHERE {
  FILTER NOT EXISTS {$this a s223:Equipment} .
$this s223:contains+ ?subEquip .
  FILTER NOT EXISTS {?subEquip a s223:Equipment} .
$this a ?type1 .
?subEquip a ?type2 .
{
?type2 rdfs:subClassOf* ?type1 .
}
UNION
{
?type1 rdfs:subClassOf* ?type2 .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 6: A medium with constituents and a pure medium."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectsAt` relation using `cnx`"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:connectsAt ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for relations that have defined inverse relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?invP $this .
}
WHERE {
  $this ?p ?o .
  ?p s223:inverseOf ?invP .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "Heating coils must always have the role `Role-Heating`"^^xsd:string ;
    sh:object ns1:Role-Heating ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: Two mediums with constituents."^^xsd:string ;
    sh:message "s223: For `Filter` {$this} there is no compatible substance between medium {?m2} and medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT ?this ?m2 ?m1
WHERE {
  ?this s223:cnx ?cp1, ?cp2 .
  ?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
  ?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
  FILTER (?cp1 != ?cp2) .
  ?cp1 s223:hasMedium ?m1 .
  ?cp2 s223:hasMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relation using `isConnectionPointOf`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxPropertyFromInverse"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:isConnectionPointOf ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:HotWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] rdfs:comment "A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:message "s223: A `Pump` shall have at least one outlet using the medium Water, Oil or Refrigerant."^^xsd:string ;
    sh:or ( [ sh:property <urn:well-known/e61fed97> ] [ sh:property <urn:well-known/64c6e8b1> ] [ sh:property <urn:well-known/cf3c762d> ] ) ;
    sh:severity sh:Warning .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Boundary CPs of a `System` belong to only members of that `System`"^^xsd:string ;
    sh:message "s223: `System` {$this} `hasBoundaryConnectionPoint` {?cp}, belonging to {?con} that is not a member of {?this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp ?con
WHERE {
$this s223:hasBoundaryConnectionPoint ?cp .
?cp s223:isConnectionPointOf ?con .
FILTER NOT EXISTS {$this s223:hasMember+ ?con}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Cooling coils must always have the role `Role-Cooling`"^^xsd:string ;
    sh:object ns1:Role-Cooling ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated setpoint use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedFrom` relations using `connectsThrough` and `connectsFrom`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedFrom ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:connectsThrough/s223:connectsFrom ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `Connectable` has s223:connected or s223:connectedTo (i.e. high-level connection specification), it must also have the supporting `cnx` relations (low-level connection specification)."^^xsd:string ;
    sh:message "s223: {$this} is s223:connected (high-level) to {?otherC} but not connected at the cnx-level."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?otherC
WHERE {
$this s223:connected ?otherC .
FILTER NOT EXISTS {$this s223:cnx+ ?otherC}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectedThrough` relation using `hasConnectionPoint` and `connectsThrough`"^^xsd:string ;
    sh:name "InferredEquipmentToConnectionProperty"^^xsd:string ;
    sh:object [ sh:path ( ns1:hasConnectionPoint ns1:connectsThrough ) ] ;
    sh:predicate ns1:connectedThrough ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Add an rdfs:label if it is missing."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this rdfs:label ?newLabel .}
WHERE {
FILTER (NOT EXISTS {$this rdfs:label ?something}) .
BIND(REPLACE(STR($this), "^.*/([^/]*)$", "$1") AS ?localNameWithoutHash)
BIND(REPLACE(?localNameWithoutHash, "^.*#(.*)$", "$1") AS ?localName)
BIND(REPLACE(?localName, "-", " ", "i") AS ?newLabel)
}
"""^^xsd:string ;
    sh:name "AddLabelFromLocalName"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsAt`"^^xsd:string ;
    sh:object [ sh:path ns1:connectsAt ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `Junction` is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:message "This `Junction` {$this} is not used to model significant details of a branching point in a connection, and may not be required."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
            SELECT $this
            WHERE {
                $this s223:hasConnectionPoint? | s223:connectedThrough? ?junc_cp_conn .

                FILTER NOT EXISTS {
                    # Connection has a relation that is not in the structural or required relationships
                    { ?junc_cp_conn ?p ?o . } UNION {?o ?p ?junc_cp_conn . }
                    FILTER (?p NOT IN (
                        s223:connected, s223:connectedTo, s223:connectedThrough, s223:hasConnectionPoint,
                        s223:connectsAt, s223:isConnectionPointOf, s223:cnx, rdf:type, rdfs:label, rdfs:comment
                    )) 
                } .
            }
        """^^xsd:string ;
    sh:severity sh:Warning .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `cnx` relation using `isConnectionPointOf`."^^xsd:string ;
    sh:name "InferredEquipmentToConnectionPointCnxPropertyFromInverse"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:isConnectionPointOf ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for consistent dimension vectors for a QuantityKind and the Unit"^^xsd:string ;
    sh:message "s223: Inconsistent dimensionalities among the `Property`'s Unit and `Property`'s Quantity Kind"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
   WHERE 
{
      $this qudt:hasQuantityKind/qudt:hasDimensionVector ?qkdv1 .
      $this qudt:hasUnit/qudt:hasDimensionVector ?qkdv2 .
FILTER (?qkdv1 != ?qkdv2) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedTo`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedTo"^^xsd:string ;
    sh:object [ sh:path ns1:connectedTo ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:TwoPositionDamper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any instance that is declared to be an instance of an abstract class must also be declared an instance of at least one subClass of that abstract class"^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of only abstract class {?class}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?class
WHERE {
?class s223:abstract true .
$this a ?class .
OPTIONAL {
?otherClass rdfs:subClassOf+ ?class .
$this a ?otherClass .
FILTER (?class != ?otherClass) .
}
FILTER (!bound (?otherClass)) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 2: A `Junction` with constituents and an associated `ConnectionPoint` with a pure medium."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `ConnectionPoint`s."^^xsd:string ;
    sh:object [ sh:path ( ns1:cnx ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for relations that have defined inverse relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?invP $this .
}
WHERE {
  $this ?p ?o .
  ?p s223:inverseOf ?invP .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Connection` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must also be an instance of sh:NodeShape. "^^xsd:string ;
    sh:message "s223: Class {$this} must be declared as an instance of sh:NodeShape."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this a sh:NodeShape} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the setpoint associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv = ?sdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsThrough`"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:connectsThrough ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The SPARQLConstraint for path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:sparql ?sparqlconstraint .
?propshape sh:path ?path .
FILTER NOT EXISTS {?sparqlconstraint rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any property shape must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The SPARQLConstraint for path {?path} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?path
WHERE {
$this sh:property ?propshape .
?propshape sh:sparql ?sparqlconstraint .
?propshape sh:path ?path .
FILTER NOT EXISTS {?sparqlconstraint rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connectsAt` relation using `cnx`"^^xsd:string ;
    sh:object [ sh:path ns1:cnx ] ;
    sh:predicate ns1:connectsAt ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:HotWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#HotWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Deadband associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Deadband {?deadband} uses QuantityKind {?dqk} with DimensionVector {?ddv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?pqk ?dqk ?pdv ?ddv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasQuantityKind ?dqk .
?pqk qudt:hasDimensionVector ?pdv .
?dqk qudt:hasDimensionVector ?ddv .
FILTER (?pqk != ?dqk) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:ZoneGroup matches the constraints defined by g36:ZoneGroup, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ZoneGroup> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedFrom` relations using `connectsThrough` and `connectsFrom`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedFrom ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:connectsThrough/s223:connectsFrom ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasObservationLocation` relation for a `Sensor` from the `Property` that it is observing, only if that property is associated with a single entity."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:hasObservationLocation ?something .}
WHERE {
{
SELECT ?prop (COUNT (DISTINCT ?measurementLocation) AS ?count) $this
WHERE {
FILTER (NOT EXISTS {$this s223:hasObservationLocation ?anything}) .
$this s223:observes ?prop .
?measurementLocation s223:hasProperty ?prop .
}
GROUP BY ?prop $this
}
FILTER (?count = 1) .
?something s223:hasProperty ?prop .
{?something a/rdfs:subClassOf* s223:Connectable}
UNION
{?something a/rdfs:subClassOf* s223:Connection}
UNION
{?something a/rdfs:subClassOf* s223:ConnectionPoint}
}
"""^^xsd:string ;
    sh:name "InferredMeasurementLocation"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connected` relation for BiDirectional connections"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connected ?d2 .}
WHERE {
$this s223:connectedThrough/^s223:connectedThrough ?d2 .
FILTER ($this != ?d2) .
FILTER NOT EXISTS {$this s223:contains* ?d2} .
FILTER NOT EXISTS {?d2 s223:contains* $this} .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasInternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasInternalReference ?int .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasRole` s223:Role-HeatTransfer relation for every instance of the listed targetClass values."^^xsd:string ;
    sh:object ns1:Role-HeatTransfer ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Junction` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m1} is incompatible with {?cp} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Junction` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m1} is incompatible with {?cp} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsFrom` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsFrom ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:OutletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: A medium with constituents and an associated property with a pure medium."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m2}, but is associated with property {?prop} that has `ofMedium` of {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m2 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with Medium {?m1} is incompatible with {?cp2} with Medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the threshold associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while threshold {?threshold} uses QuantityKind {?tqk} with DimensionVector {?tdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasQuantityKind ?tqk .
?pqk qudt:hasDimensionVector ?pdv .
?tqk qudt:hasDimensionVector ?tdv .
FILTER (?pqk != ?tqk) .
FILTER (?pdv != ?tdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must be a direct or indirect subclass of s223:Concept. "^^xsd:string ;
    sh:message "s223: Class {$this} must be within the rdfs:subClassOf hierarchy under s223:Concept."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:subClassOf* rdf:Property} .
FILTER NOT EXISTS {$this rdfs:subClassOf* s223:Concept} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a substance has a constituent, that constituent may not itself have constituents."^^xsd:string ;
    sh:message "s223: This substance {$this} has a constituent {?constituent} that itself composed ofs {?nextConstituent}. Create new substance with only atomic constituents."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?constituent ?nextConstituent
WHERE {
$this s223:composedOf ?constituent .
?constituent s223:ofConstituent/s223:composedOf ?nextConstituent .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The non-electrical `ConnectionPoint`s of a `Pump` must have compatible Media."^^xsd:string ;
    sh:message "s223: {?cpa} and {?cpb} on the `Pump` {$this} have incompatible Media {$mediuma} and {$mediumb}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cpa ?cpb ?mediuma ?mediumb
WHERE {
  $this s223:hasConnectionPoint ?cpa .
  $this s223:hasConnectionPoint ?cpb .
  FILTER (?cpa != ?cpb) .
  ?cpa s223:hasMedium ?mediuma .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  ?cpb s223:hasMedium ?mediumb .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* s223:Constituent-Electricity}) .
  FILTER (?mediuma != ?mediumb) .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* ?mediuma}) .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* ?mediumb}) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `hasQuantityKind` relation if it is unambiguous."^^xsd:string ;
    sh:construct """
CONSTRUCT {
$this qudt:hasQuantityKind ?uniqueqk
}
WHERE {
{
SELECT $this (COUNT (DISTINCT (?qk)) AS ?count)
WHERE {
FILTER (NOT EXISTS {$this qudt:hasQuantityKind ?something}) .
$this qudt:hasUnit/qudt:hasQuantityKind ?qk .
}
GROUP BY $this
}
FILTER (?count = 1)
$this qudt:hasUnit/qudt:hasQuantityKind ?uniqueqk .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for consistent dimension vectors for a QuantityKind and the Unit"^^xsd:string ;
    sh:message "s223: Inconsistent dimensionalities among the `Property`'s Unit and `Property`'s Quantity Kind"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
   WHERE 
{
      $this qudt:hasQuantityKind/qudt:hasDimensionVector ?qkdv1 .
      $this qudt:hasUnit/qudt:hasDimensionVector ?qkdv2 .
FILTER (?qkdv1 != ?qkdv2) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the threshold associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while threshold {?threshold} uses Unit {?tunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?threshold ?punit ?tunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasThreshold ?threshold .
?threshold qudt:hasUnit ?tunit .
?punit qudt:hasDimensionVector ?pdv .
?tunit qudt:hasDimensionVector ?tdv .
FILTER (?punit != ?tunit) .
FILTER (?pdv = ?tdv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Every class of the 223 standard must be a direct or indirect subclass of s223:Concept. "^^xsd:string ;
    sh:message "s223: Class {$this} must be within the rdfs:subClassOf hierarchy under s223:Concept."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
FILTER NOT EXISTS {$this rdfs:subClassOf* rdf:Property} .
FILTER NOT EXISTS {$this rdfs:subClassOf* s223:Concept} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for valid enumeration value consistent with the stated `EnumerationKind`."^^xsd:string ;
    sh:message "s223: {$this} has an enumeration value of {?value} which is not a valid {?kind}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?value ?kind
WHERE {
$this s223:hasValue ?value .
$this s223:hasEnumerationKind ?kind .
FILTER (NOT EXISTS {?value a/rdfs:subClassOf* ?kind}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Disallow contained equipment from having external incoming connections."^^xsd:string ;
    sh:message "s223: {$this} should not have a connection from external equipment {?otherDev} because {?container} contains {$this}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedFrom ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` must not have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:message "s223: {$this} cannot have both a `hasExternalReference` and a `hasValue` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this s223:hasExternalReference ?ext .
$this s223:hasValue ?val .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If an incoming relation `composedOf` exists, then the `Property` must have a declared substance using the relation `ofConstituent`."^^xsd:string ;
    sh:message "s223: `Property` {$this} is referred to by {?something} with s223:composedOf, but the `Property` has no value for s223:ofConstituent."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?something
WHERE {
?something s223:composedOf $this .
FILTER NOT EXISTS {$this s223:ofConstituent ?someSubstance} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:FanWithVFD, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated setpoint use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while setpoint {?setpoint} uses Unit {?sunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:Damper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#DamperOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Damper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Electricity-DC .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` cannot have a value without a Unit."^^xsd:string ;
    sh:message "s223: {$this} referenced by {?subject} has a value of {?v} but does not specify a Unit."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?v ?subject
WHERE {
$this s223:hasValue ?v .
FILTER NOT EXISTS {$this qudt:hasUnit ?u} .
?subject ?p $this .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Declare the inverse triples for symmetric relations"^^xsd:string ;
    sh:construct """
CONSTRUCT {
?o ?p $this .
}
WHERE {
  $this ?p ?o .
  ?p a s223:SymmetricProperty .
}
			"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 15.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: `Junction` {$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 7: Two `ConnectionPoint`s with mediums with constituents."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m2} is incompatible with {?cp2} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m2 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2 ) .
?cp2 s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A medium with constituents and an associated property with constituents."^^xsd:string ;
    sh:message "s223: {$this} `hasMedium` of {?m1}, but is associated with property {?prop} that has `ofMedium` of {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m1 ?prop ?m2
WHERE {
$this s223:hasMedium ?m1 .
$this ?p ?prop .
?prop a/rdfs:subClassOf* s223:Property .
?prop s223:ofMedium ?m2 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `Conductor`."^^xsd:string ;
    sh:object [ sh:path ( ns1:connectsThrough ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Connection` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Heating coils must always have the role `Role-Heating`"^^xsd:string ;
    sh:object ns1:Role-Heating ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Checks for consistent dimension vectors for a QuantityKind and the Unit"^^xsd:string ;
    sh:message "s223: Inconsistent dimensionalities among the `Property`'s Unit and `Property`'s Quantity Kind"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
   WHERE 
{
      $this qudt:hasQuantityKind/qudt:hasDimensionVector ?qkdv1 .
      $this qudt:hasUnit/qudt:hasDimensionVector ?qkdv2 .
FILTER (?qkdv1 != ?qkdv2) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 3: `Connection` with a pure medium and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
?m2 s223:composedOf/s223:ofConstituent ?s2 .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {
  ?m2 s223:composedOf/s223:ofConstituent ?s12 .
  {?s12 rdfs:subClassOf* ?m1} UNION {?m1 rdfs:subClassOf* ?s12} .
}
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` lacks a `connectsThrough` and `mapsTo` relation, but is associated with a `Junction` or `Equipment` that is contained by an `Equipment`, then suggest that the `ConnectionPoint` might need a `mapsTo` relation to a `ConnectionPoint` of the containing `Equipment`."^^xsd:string ;
    sh:message "s223: `ConnectionPoint` {$this} could be missing a `mapsTo` relation to a `ConnectionPoint` of {?containerEquipment} because it is associated with a `Junction` or `Equipment` that is contained by {?containerEquipment}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?containerEquipment
    WHERE {
        FILTER NOT EXISTS {$this s223:connectsThrough ?anything1} .
        FILTER NOT EXISTS {$this s223:mapsTo ?anything2} .
        FILTER NOT EXISTS {?anything3 s223:hasBoundaryConnectionPoint $this} .
        $this s223:isConnectionPointOf ?equipment .
        ?containerEquipment s223:contains ?equipment .
        }
        """^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 1: Two pure mediums."^^xsd:string ;
    sh:message "s223: {$this} with inlet medium {?m2} is incompatible with outlet medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?m1
WHERE {
$this s223:cnx ?cp1, ?cp2 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
FILTER (?cp1 != ?cp2) .
?cp1 s223:hasMedium ?m1 .
?cp2 s223:hasMedium ?m2 . 
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 4: A `Connection` with constituents and an associated `ConnectionPoint` with constituents."^^xsd:string ;
    sh:message "s223: `Connection` {$this} with medium {?m2} is incompatible with {?cp} with medium {?m1}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m2 .
$this s223:hasMedium ?m1 .
    ?m1 s223:composedOf/s223:ofConstituent ?s1 .
    ?m2 s223:composedOf/s223:ofConstituent ?s2 .
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s11 .
    ?m2 s223:composedOf/s223:ofConstituent ?s12 .
    FILTER (?s11 = ?s12) .
  }
  FILTER NOT EXISTS {
    ?m1 s223:composedOf/s223:ofConstituent ?s21 .
    ?m2 s223:composedOf/s223:ofConstituent ?s22 .
    {?s22 rdfs:subClassOf* ?s21} UNION {?s21 rdfs:subClassOf* ?s22} .
  }
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Deadband associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Deadband {?deadband} uses QuantityKind {?dqk} with DimensionVector {?ddv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?pqk ?dqk ?pdv ?ddv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasQuantityKind ?dqk .
?pqk qudt:hasDimensionVector ?pdv .
?dqk qudt:hasDimensionVector ?ddv .
FILTER (?pqk != ?dqk) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Glycol conc"^^xsd:string ;
    ns1:hasValue 15.0 ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that the Medium identified by a `ConnectionPoint` via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the `mapsTo`+ relation."^^xsd:string ;
    sh:message "s223: {$this} declares a medium of {?a}, but the medium of {?b} is declared by {?target} pointed to by the `mapsTo`+ relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?a ?b ?target
WHERE {
$this s223:hasMedium ?a .
$this s223:mapsTo+ ?target .
?target s223:hasMedium ?b .
?a a/rdfs:subClassOf* s223:Substance-Medium .
?b a/rdfs:subClassOf* s223:Substance-Medium .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any instance that is declared to be an instance of an abstract class must also be declared an instance of at least one subClass of that abstract class"^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of only abstract class {?class}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?class
WHERE {
?class s223:abstract true .
$this a ?class .
OPTIONAL {
?otherClass rdfs:subClassOf+ ?class .
$this a ?otherClass .
FILTER (?class != ?otherClass) .
}
FILTER (!bound (?otherClass)) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `Zone` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasDomainSpace ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Valve matches the constraints defined by g36:ChilledWaterValve, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve>,
        <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValveOrShape1> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#ChilledWaterValve> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` uses a different Unit than the Deadband associated with it."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. Be careful."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv = ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectedFrom` relations using `connectsThrough` and `connectsFrom`."^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectedFrom ?equipment .}
WHERE {
$this s223:hasConnectionPoint ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:connectsThrough/s223:connectsFrom ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredEquipmentToUpstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "The associated Domain of a `Zone` and the Domain of the DomainSpaces it contains must be the same."^^xsd:string ;
    sh:message "s223: `Zone` {$this} has a Domain of {?domain}, but it contains a `DomainSpace` {?ds} which has a Domain of {?dsdomain}. These should be the same."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?domain ?ds ?dsdomain
WHERE {
$this a s223:Zone .
$this s223:hasDomain ?domain .
$this s223:contains ?ds .
?ds s223:hasDomain ?dsdomain .
FILTER (?domain != ?dsdomain)
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer `cnx` relation using `connectsThrough`"^^xsd:string ;
    sh:object [ sh:path [ sh:inversePath ns1:connectsThrough ] ] ;
    sh:predicate ns1:cnx ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure the electrical phase is the same as all connected `ConnectionPoint`s"^^xsd:string ;
    sh:message "s223: {$this} has an electrical phase of {?myphase} which is different from {?cpPhase} for `ConnectionPoint` {?cp}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?myphase ?cp ?cpPhase
    WHERE {
        $this s223:hasElectricalPhase ?myphase .
        $this s223:connectsAt ?cp .
        ?cp s223:hasElectricalPhase ?cpPhase .
        FILTER (?myphase != ?cpPhase) .
        }
        """^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Damper matches the constraints defined by g36:TwoPositionDamper, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#TwoPositionDamper> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLRule ;
    rdfs:comment "Infer the `connectsTo` relation using `connectsAt`"^^xsd:string ;
    sh:construct """
CONSTRUCT {$this s223:connectsTo ?equipment .}
WHERE {
$this s223:connectsAt ?cp .
?cp a s223:InletConnectionPoint .
?cp s223:isConnectionPointOf ?equipment .
}
"""^^xsd:string ;
    sh:name "InferredConnectionToDownstreamEquipmentProperty"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `Connectable` has s223:connected or s223:connectedTo (i.e. high-level connection specification), it must also have the supporting `cnx` relations (low-level connection specification)."^^xsd:string ;
    sh:message "s223: {$this} is s223:connected (high-level) to {?otherC} but not connected at the cnx-level."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?otherC
WHERE {
$this s223:connected ?otherC .
FILTER NOT EXISTS {$this s223:cnx+ ?otherC}
}
"""^^xsd:string .

[] a sh:SPARQLRule ;
    rdfs:comment "For equipment contained within another piece of equipment use the `mapsTo` relation to infer a Medium from the containing equipment."^^xsd:string ;
    sh:construct """
CONSTRUCT {
    ?childCp s223:hasMedium ?medium .
}
WHERE {
  $this s223:hasConnectionPoint ?cp .
  ?childCp s223:mapsTo ?cp .
  ?cp s223:connectsThrough ?connection .
  ?cp s223:hasMedium ?medium .
  FILTER NOT EXISTS {?childCp s223:hasMedium ?something} .
}
"""^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosed DomainSpaces to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( ns1:hasDomainSpace ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a sh:TripleRule ;
    rdfs:comment "Infer a `hasDomain` relation by checking any enclosing `Zone` to determine the domain."^^xsd:string ;
    sh:object [ sh:path ( [ sh:inversePath ns1:hasDomainSpace ] ns1:hasDomain ) ] ;
    sh:predicate ns1:hasDomain ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 70.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every SPARQLRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Every SPARQLRule for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this sh:rule ?rule .
?rule a sh:SPARQLRule .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` instance cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this a/rdfs:subClassOf* s223:ActuatableProperty .
$this a/rdfs:subClassOf* s223:ObservableProperty .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every TripleRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: The TripleRule inferring {?pred} for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?pred
WHERE {
$this sh:rule ?rule .
?rule a sh:TripleRule .
?rule sh:predicate ?pred .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasElectricalPhase` value from any connected `Conductor`."^^xsd:string ;
    sh:object [ sh:path ( ns1:connectsThrough ns1:hasElectricalPhase ) ] ;
    sh:predicate ns1:hasElectricalPhase ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure the electrical phase is the same as all connected `ConnectionPoint`s"^^xsd:string ;
    sh:message "s223: {$this} has an electrical phase of {?myphase} which is different from {?cpPhase} for `ConnectionPoint` {?cp}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
    SELECT $this ?myphase ?cp ?cpPhase
    WHERE {
        $this s223:hasElectricalPhase ?myphase .
        $this s223:connectsAt ?cp .
        ?cp s223:hasElectricalPhase ?cpPhase .
        FILTER (?myphase != ?cpPhase) .
        }
        """^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-Glycol ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:Fan, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#Fan> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "If a `ConnectionPoint` `mapsTo` another `ConnectionPoint`, the respective `Equipment` should have a `contains` relation."^^xsd:string ;
    sh:message "s223: {?otherEquipment} should contain {?equipment} because `ConnectionPoint` {$this} has a `mapsTo` relation."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?equipment ?otherEquipment
WHERE {
$this s223:mapsTo ?otherCP .
?equipment s223:hasConnectionPoint $this .
?otherEquipment s223:hasConnectionPoint ?otherCP .
FILTER NOT EXISTS {?otherEquipment s223:contains ?equipment}
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "If an instance of s223:Fan matches the constraints defined by g36:FanWithVFD, it will be declared as an instance of that class."^^xsd:string ;
    sh:condition <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:object <http://data.ashrae.org/standard223/1.0/extensions/g36#FanWithVFD> ;
    sh:predicate rdf:type ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "s223: If the observed `Property` has isDeltaQuantity true, the `Sensor` must have a `hasReferenceLocation` relation."^^xsd:string ;
    sh:message "s223: `Sensor` {$this} has `Property` {?x} with isDeltaQuantity true, but the `Sensor` lacks a reference location."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
          SELECT $this ?x
          WHERE {
$this s223:observes/qudt:isDeltaQuantity true .
$this s223:observes ?x .
?x a/rdfs:subClassOf* s223:QuantifiableProperty .
FILTER NOT EXISTS {$this s223:hasReferenceLocation ?y}
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Freezing point"^^xsd:string ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/Temperature> .

[] a sh:TripleRule ;
    rdfs:comment "Heating coils must always have the role `Role-Heating`"^^xsd:string ;
    sh:object ns1:Role-Heating ;
    sh:predicate ns1:hasRole ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that every SPARQLRule must have an rdfs:comment. "^^xsd:string ;
    sh:message "s223: Every SPARQLRule for Class {$this} must have an rdfs:comment."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this sh:rule ?rule .
?rule a sh:SPARQLRule .
FILTER NOT EXISTS {?rule rdfs:comment ?comment} .
}
"""^^xsd:string .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `hasBoundaryConnectionPoint` relation using `hasOptionalConnectionPoint`."^^xsd:string ;
    sh:name "InferredSystemToBoundaryConnectionPointFromOptional"^^xsd:string ;
    sh:object [ sh:path ns1:hasOptionalConnectionPoint ] ;
    sh:predicate ns1:hasBoundaryConnectionPoint ;
    sh:subject sh:this .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the Setpoint associated with it have non-commensurate QuantityKinds."^^xsd:string ;
    sh:message "s223: {$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Setpoint {?setpoint} uses QuantityKind {?sqk} with DimensionVector {?sdv}. These are non-commensurate"^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?setpoint ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasQuantityKind ?sqk .
?pqk qudt:hasDimensionVector ?pdv .
?sqk qudt:hasDimensionVector ?sdv .
FILTER (?pqk != ?sqk) .
FILTER (?pdv != ?sdv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Ensure that any instance that is declared to be an instance of an abstract class must also be declared an instance of at least one subClass of that abstract class"^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of only abstract class {?class}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT DISTINCT $this ?class
WHERE {
?class s223:abstract true .
$this a ?class .
OPTIONAL {
?otherClass rdfs:subClassOf+ ?class .
$this a ?otherClass .
FILTER (?class != ?otherClass) .
}
FILTER (!bound (?otherClass)) .
}
"""^^xsd:string .

[] a sh:TripleRule ;
    rdfs:comment "Infer the `connected` relation using `connectedFrom`"^^xsd:string ;
    sh:name "InferredEquipmentToEquipmentPropertyfromconnectedFrom"^^xsd:string ;
    sh:object [ sh:path ns1:connectedFrom ] ;
    sh:predicate ns1:connected ;
    sh:subject sh:this .

[] a ns1:QuantifiableProperty ;
    rdfs:label "Water conc"^^xsd:string ;
    ns1:hasValue 85.0 ;
    ns1:ofConstituent ns1:Constituent-H2O ;
    ns2:hasQuantityKind <http://qudt.org/vocab/quantitykind/VolumeFraction> ;
    ns2:hasUnit <http://qudt.org/vocab/unit/PERCENT> .

[] a ns1:Property ;
    rdfs:label "Unspecified"^^xsd:string ;
    ns1:ofConstituent ns1:Signal-Ethernet .

[] a sh:SPARQLConstraint ;
    rdfs:comment "Incompatible Medium. Case 5: Two `ConnectionPoint`s with pure mediums."^^xsd:string ;
    sh:message "s223: {?cp1} with medium {?m1} is incompatible with {?cp2} with medium {?m2}."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?cp1 ?m1 ?cp2 ?m2
WHERE {
$this s223:cnx ?cp1 .
?cp1 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp1 s223:hasMedium ?m1 .
$this s223:cnx ?cp2 .
?cp2 a/rdfs:subClassOf* s223:ConnectionPoint .
?cp2 s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER NOT EXISTS {?m1 s223:composedOf ?c1} .
FILTER NOT EXISTS {?m2 s223:composedOf ?c2}
FILTER (NOT EXISTS {?m2 rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 rdfs:subClassOf* ?m2}) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "This `QuantifiableProperty` and the associated Deadband use non-commensurate Units."^^xsd:string ;
    sh:message "s223: {$this} uses Unit {?punit}, while Deadband {?deadband} uses Unit {?dunit}. These are non-commensurate."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this ?deadband ?punit ?dunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasDeadband ?deadband .
?deadband qudt:hasUnit ?dunit .
?punit qudt:hasDimensionVector ?pdv .
?dunit qudt:hasDimensionVector ?ddv .
FILTER (?punit != ?dunit) .
FILTER (?pdv != ?ddv) .
}
"""^^xsd:string .

[] a sh:SPARQLConstraint ;
    rdfs:comment "A `Property` instance cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:message "s223: {$this} cannot be declared an instance of both an `ActuatableProperty` and an `ObservableProperty`."^^xsd:string ;
    sh:prefixes <http://data.ashrae.org/standard223/1.0/model/all> ;
    sh:select """
SELECT $this
WHERE {
$this a/rdfs:subClassOf* s223:ActuatableProperty .
$this a/rdfs:subClassOf* s223:ObservableProperty .
}
"""^^xsd:string .

